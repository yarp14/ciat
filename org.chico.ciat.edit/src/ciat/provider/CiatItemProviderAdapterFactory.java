/**
 */
package ciat.provider;

import ciat.util.CiatAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CiatItemProviderAdapterFactory extends CiatAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CiatItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CIATDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CIATDiagramItemProvider ciatDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CIATDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCIATDiagramAdapter() {
		if (ciatDiagramItemProvider == null) {
			ciatDiagramItemProvider = new CIATDiagramItemProvider(this);
		}

		return ciatDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Sociogram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SociogramItemProvider sociogramItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Sociogram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSociogramAdapter() {
		if (sociogramItemProvider == null) {
			sociogramItemProvider = new SociogramItemProvider(this);
		}

		return sociogramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SociogramNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SociogramNodeItemProvider sociogramNodeItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SociogramNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSociogramNodeAdapter() {
		if (sociogramNodeItemProvider == null) {
			sociogramNodeItemProvider = new SociogramNodeItemProvider(this);
		}

		return sociogramNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Rol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RolItemProvider rolItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Rol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRolAdapter() {
		if (rolItemProvider == null) {
			rolItemProvider = new RolItemProvider(this);
		}

		return rolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SoftwareAgent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareAgentItemProvider softwareAgentItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SoftwareAgent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareAgentAdapter() {
		if (softwareAgentItemProvider == null) {
			softwareAgentItemProvider = new SoftwareAgentItemProvider(this);
		}

		return softwareAgentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Team} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TeamItemProvider teamItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Team}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTeamAdapter() {
		if (teamItemProvider == null) {
			teamItemProvider = new TeamItemProvider(this);
		}

		return teamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SociogramLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SociogramLinkItemProvider sociogramLinkItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SociogramLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSociogramLinkAdapter() {
		if (sociogramLinkItemProvider == null) {
			sociogramLinkItemProvider = new SociogramLinkItemProvider(this);
		}

		return sociogramLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Inheritance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritanceItemProvider inheritanceItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Inheritance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritanceAdapter() {
		if (inheritanceItemProvider == null) {
			inheritanceItemProvider = new InheritanceItemProvider(this);
		}

		return inheritanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Acting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActingItemProvider actingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Acting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActingAdapter() {
		if (actingItemProvider == null) {
			actingItemProvider = new ActingItemProvider(this);
		}

		return actingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ProcessDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessDiagramItemProvider processDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ProcessDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessDiagramAdapter() {
		if (processDiagramItemProvider == null) {
			processDiagramItemProvider = new ProcessDiagramItemProvider(this);
		}

		return processDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ProcessNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessNodeItemProvider processNodeItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ProcessNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessNodeAdapter() {
		if (processNodeItemProvider == null) {
			processNodeItemProvider = new ProcessNodeItemProvider(this);
		}

		return processNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Init} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitItemProvider initItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Init}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitAdapter() {
		if (initItemProvider == null) {
			initItemProvider = new InitItemProvider(this);
		}

		return initItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.End} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndItemProvider endItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.End}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndAdapter() {
		if (endItemProvider == null) {
			endItemProvider = new EndItemProvider(this);
		}

		return endItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SimpleTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTaskItemProvider simpleTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SimpleTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTaskAdapter() {
		if (simpleTaskItemProvider == null) {
			simpleTaskItemProvider = new SimpleTaskItemProvider(this);
		}

		return simpleTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.IndividualTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualTaskItemProvider individualTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.IndividualTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualTaskAdapter() {
		if (individualTaskItemProvider == null) {
			individualTaskItemProvider = new IndividualTaskItemProvider(this);
		}

		return individualTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CooperativeTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CooperativeTaskItemProvider cooperativeTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CooperativeTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCooperativeTaskAdapter() {
		if (cooperativeTaskItemProvider == null) {
			cooperativeTaskItemProvider = new CooperativeTaskItemProvider(this);
		}

		return cooperativeTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CollaborativeTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeTaskItemProvider collaborativeTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CollaborativeTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeTaskAdapter() {
		if (collaborativeTaskItemProvider == null) {
			collaborativeTaskItemProvider = new CollaborativeTaskItemProvider(this);
		}

		return collaborativeTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.AbstractTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractTaskItemProvider abstractTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.AbstractTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractTaskAdapter() {
		if (abstractTaskItemProvider == null) {
			abstractTaskItemProvider = new AbstractTaskItemProvider(this);
		}

		return abstractTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Tool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToolItemProvider toolItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Tool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToolAdapter() {
		if (toolItemProvider == null) {
			toolItemProvider = new ToolItemProvider(this);
		}

		return toolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectItemProvider objectItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectAdapter() {
		if (objectItemProvider == null) {
			objectItemProvider = new ObjectItemProvider(this);
		}

		return objectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.TemporalCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalConditionItemProvider temporalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.TemporalCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalConditionAdapter() {
		if (temporalConditionItemProvider == null) {
			temporalConditionItemProvider = new TemporalConditionItemProvider(this);
		}

		return temporalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Notification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotificationItemProvider notificationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Notification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotificationAdapter() {
		if (notificationItemProvider == null) {
			notificationItemProvider = new NotificationItemProvider(this);
		}

		return notificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.DomainDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainDiagramItemProvider domainDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.DomainDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainDiagramAdapter() {
		if (domainDiagramItemProvider == null) {
			domainDiagramItemProvider = new DomainDiagramItemProvider(this);
		}

		return domainDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SharedObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedObjectItemProvider sharedObjectItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SharedObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedObjectAdapter() {
		if (sharedObjectItemProvider == null) {
			sharedObjectItemProvider = new SharedObjectItemProvider(this);
		}

		return sharedObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.VisualizationArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualizationAreaItemProvider visualizationAreaItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.VisualizationArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualizationAreaAdapter() {
		if (visualizationAreaItemProvider == null) {
			visualizationAreaItemProvider = new VisualizationAreaItemProvider(this);
		}

		return visualizationAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ExclusiveEditionArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveEditionAreaItemProvider exclusiveEditionAreaItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ExclusiveEditionArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveEditionAreaAdapter() {
		if (exclusiveEditionAreaItemProvider == null) {
			exclusiveEditionAreaItemProvider = new ExclusiveEditionAreaItemProvider(this);
		}

		return exclusiveEditionAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CollaborativeArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeAreaItemProvider collaborativeAreaItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CollaborativeArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeAreaAdapter() {
		if (collaborativeAreaItemProvider == null) {
			collaborativeAreaItemProvider = new CollaborativeAreaItemProvider(this);
		}

		return collaborativeAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.IndividualArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualAreaItemProvider individualAreaItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.IndividualArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualAreaAdapter() {
		if (individualAreaItemProvider == null) {
			individualAreaItemProvider = new IndividualAreaItemProvider(this);
		}

		return individualAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SharedLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedLinkItemProvider sharedLinkItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SharedLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedLinkAdapter() {
		if (sharedLinkItemProvider == null) {
			sharedLinkItemProvider = new SharedLinkItemProvider(this);
		}

		return sharedLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ShAssociationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShAssociationLinkItemProvider shAssociationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ShAssociationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShAssociationLinkAdapter() {
		if (shAssociationLinkItemProvider == null) {
			shAssociationLinkItemProvider = new ShAssociationLinkItemProvider(this);
		}

		return shAssociationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ShGeneralizationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShGeneralizationLinkItemProvider shGeneralizationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ShGeneralizationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShGeneralizationLinkAdapter() {
		if (shGeneralizationLinkItemProvider == null) {
			shGeneralizationLinkItemProvider = new ShGeneralizationLinkItemProvider(this);
		}

		return shGeneralizationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ShAggregationLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShAggregationLinkItemProvider shAggregationLinkItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ShAggregationLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShAggregationLinkAdapter() {
		if (shAggregationLinkItemProvider == null) {
			shAggregationLinkItemProvider = new ShAggregationLinkItemProvider(this);
		}

		return shAggregationLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CTTDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTTDiagramItemProvider cttDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CTTDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTTDiagramAdapter() {
		if (cttDiagramItemProvider == null) {
			cttDiagramItemProvider = new CTTDiagramItemProvider(this);
		}

		return cttDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CTTTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTTTaskItemProvider cttTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CTTTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTTTaskAdapter() {
		if (cttTaskItemProvider == null) {
			cttTaskItemProvider = new CTTTaskItemProvider(this);
		}

		return cttTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ExclusiveEdition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExclusiveEditionItemProvider exclusiveEditionItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ExclusiveEdition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExclusiveEditionAdapter() {
		if (exclusiveEditionItemProvider == null) {
			exclusiveEditionItemProvider = new ExclusiveEditionItemProvider(this);
		}

		return exclusiveEditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CollaborativeVisualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollaborativeVisualizationItemProvider collaborativeVisualizationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CollaborativeVisualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollaborativeVisualizationAdapter() {
		if (collaborativeVisualizationItemProvider == null) {
			collaborativeVisualizationItemProvider = new CollaborativeVisualizationItemProvider(this);
		}

		return collaborativeVisualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.IndividualVisualization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndividualVisualizationItemProvider individualVisualizationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.IndividualVisualization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndividualVisualizationAdapter() {
		if (individualVisualizationItemProvider == null) {
			individualVisualizationItemProvider = new IndividualVisualizationItemProvider(this);
		}

		return individualVisualizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.UserTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserTaskItemProvider userTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.UserTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserTaskAdapter() {
		if (userTaskItemProvider == null) {
			userTaskItemProvider = new UserTaskItemProvider(this);
		}

		return userTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CTTAbstractTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTTAbstractTaskItemProvider cttAbstractTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CTTAbstractTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTTAbstractTaskAdapter() {
		if (cttAbstractTaskItemProvider == null) {
			cttAbstractTaskItemProvider = new CTTAbstractTaskItemProvider(this);
		}

		return cttAbstractTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.InteractiveTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractiveTaskItemProvider interactiveTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.InteractiveTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractiveTaskAdapter() {
		if (interactiveTaskItemProvider == null) {
			interactiveTaskItemProvider = new InteractiveTaskItemProvider(this);
		}

		return interactiveTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.CTTCollaborativeTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CTTCollaborativeTaskItemProvider cttCollaborativeTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.CTTCollaborativeTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCTTCollaborativeTaskAdapter() {
		if (cttCollaborativeTaskItemProvider == null) {
			cttCollaborativeTaskItemProvider = new CTTCollaborativeTaskItemProvider(this);
		}

		return cttCollaborativeTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ApplicationTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationTaskItemProvider applicationTaskItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ApplicationTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationTaskAdapter() {
		if (applicationTaskItemProvider == null) {
			applicationTaskItemProvider = new ApplicationTaskItemProvider(this);
		}

		return applicationTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Aggregation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationItemProvider aggregationItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Aggregation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationAdapter() {
		if (aggregationItemProvider == null) {
			aggregationItemProvider = new AggregationItemProvider(this);
		}

		return aggregationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Enabling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnablingItemProvider enablingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Enabling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnablingAdapter() {
		if (enablingItemProvider == null) {
			enablingItemProvider = new EnablingItemProvider(this);
		}

		return enablingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.Disabling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisablingItemProvider disablingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.Disabling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisablingAdapter() {
		if (disablingItemProvider == null) {
			disablingItemProvider = new DisablingItemProvider(this);
		}

		return disablingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.EnablingWithInformationPassing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnablingWithInformationPassingItemProvider enablingWithInformationPassingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.EnablingWithInformationPassing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnablingWithInformationPassingAdapter() {
		if (enablingWithInformationPassingItemProvider == null) {
			enablingWithInformationPassingItemProvider = new EnablingWithInformationPassingItemProvider(this);
		}

		return enablingWithInformationPassingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.DisablingWithInformationPassing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisablingWithInformationPassingItemProvider disablingWithInformationPassingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.DisablingWithInformationPassing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisablingWithInformationPassingAdapter() {
		if (disablingWithInformationPassingItemProvider == null) {
			disablingWithInformationPassingItemProvider = new DisablingWithInformationPassingItemProvider(this);
		}

		return disablingWithInformationPassingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.IndependentConcurrency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndependentConcurrencyItemProvider independentConcurrencyItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.IndependentConcurrency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndependentConcurrencyAdapter() {
		if (independentConcurrencyItemProvider == null) {
			independentConcurrencyItemProvider = new IndependentConcurrencyItemProvider(this);
		}

		return independentConcurrencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.OrderIndependence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderIndependenceItemProvider orderIndependenceItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.OrderIndependence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderIndependenceAdapter() {
		if (orderIndependenceItemProvider == null) {
			orderIndependenceItemProvider = new OrderIndependenceItemProvider(this);
		}

		return orderIndependenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.SuspendResume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuspendResumeItemProvider suspendResumeItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.SuspendResume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuspendResumeAdapter() {
		if (suspendResumeItemProvider == null) {
			suspendResumeItemProvider = new SuspendResumeItemProvider(this);
		}

		return suspendResumeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.ConcurrencyWithInformationPassing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcurrencyWithInformationPassingItemProvider concurrencyWithInformationPassingItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.ConcurrencyWithInformationPassing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConcurrencyWithInformationPassingAdapter() {
		if (concurrencyWithInformationPassingItemProvider == null) {
			concurrencyWithInformationPassingItemProvider = new ConcurrencyWithInformationPassingItemProvider(this);
		}

		return concurrencyWithInformationPassingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.DeterministicChoice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeterministicChoiceItemProvider deterministicChoiceItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.DeterministicChoice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeterministicChoiceAdapter() {
		if (deterministicChoiceItemProvider == null) {
			deterministicChoiceItemProvider = new DeterministicChoiceItemProvider(this);
		}

		return deterministicChoiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ciat.UndeterministicChoice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndeterministicChoiceItemProvider undeterministicChoiceItemProvider;

	/**
	 * This creates an adapter for a {@link ciat.UndeterministicChoice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndeterministicChoiceAdapter() {
		if (undeterministicChoiceItemProvider == null) {
			undeterministicChoiceItemProvider = new UndeterministicChoiceItemProvider(this);
		}

		return undeterministicChoiceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (ciatDiagramItemProvider != null) ciatDiagramItemProvider.dispose();
		if (sociogramItemProvider != null) sociogramItemProvider.dispose();
		if (sociogramNodeItemProvider != null) sociogramNodeItemProvider.dispose();
		if (rolItemProvider != null) rolItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (softwareAgentItemProvider != null) softwareAgentItemProvider.dispose();
		if (teamItemProvider != null) teamItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (sociogramLinkItemProvider != null) sociogramLinkItemProvider.dispose();
		if (inheritanceItemProvider != null) inheritanceItemProvider.dispose();
		if (actingItemProvider != null) actingItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (processDiagramItemProvider != null) processDiagramItemProvider.dispose();
		if (processNodeItemProvider != null) processNodeItemProvider.dispose();
		if (initItemProvider != null) initItemProvider.dispose();
		if (endItemProvider != null) endItemProvider.dispose();
		if (simpleTaskItemProvider != null) simpleTaskItemProvider.dispose();
		if (individualTaskItemProvider != null) individualTaskItemProvider.dispose();
		if (cooperativeTaskItemProvider != null) cooperativeTaskItemProvider.dispose();
		if (collaborativeTaskItemProvider != null) collaborativeTaskItemProvider.dispose();
		if (abstractTaskItemProvider != null) abstractTaskItemProvider.dispose();
		if (toolItemProvider != null) toolItemProvider.dispose();
		if (objectItemProvider != null) objectItemProvider.dispose();
		if (temporalConditionItemProvider != null) temporalConditionItemProvider.dispose();
		if (notificationItemProvider != null) notificationItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (domainDiagramItemProvider != null) domainDiagramItemProvider.dispose();
		if (sharedObjectItemProvider != null) sharedObjectItemProvider.dispose();
		if (visualizationAreaItemProvider != null) visualizationAreaItemProvider.dispose();
		if (exclusiveEditionAreaItemProvider != null) exclusiveEditionAreaItemProvider.dispose();
		if (collaborativeAreaItemProvider != null) collaborativeAreaItemProvider.dispose();
		if (individualAreaItemProvider != null) individualAreaItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (sharedLinkItemProvider != null) sharedLinkItemProvider.dispose();
		if (shAssociationLinkItemProvider != null) shAssociationLinkItemProvider.dispose();
		if (shGeneralizationLinkItemProvider != null) shGeneralizationLinkItemProvider.dispose();
		if (shAggregationLinkItemProvider != null) shAggregationLinkItemProvider.dispose();
		if (cttDiagramItemProvider != null) cttDiagramItemProvider.dispose();
		if (cttTaskItemProvider != null) cttTaskItemProvider.dispose();
		if (exclusiveEditionItemProvider != null) exclusiveEditionItemProvider.dispose();
		if (collaborativeVisualizationItemProvider != null) collaborativeVisualizationItemProvider.dispose();
		if (individualVisualizationItemProvider != null) individualVisualizationItemProvider.dispose();
		if (userTaskItemProvider != null) userTaskItemProvider.dispose();
		if (cttAbstractTaskItemProvider != null) cttAbstractTaskItemProvider.dispose();
		if (interactiveTaskItemProvider != null) interactiveTaskItemProvider.dispose();
		if (cttCollaborativeTaskItemProvider != null) cttCollaborativeTaskItemProvider.dispose();
		if (applicationTaskItemProvider != null) applicationTaskItemProvider.dispose();
		if (dependencyItemProvider != null) dependencyItemProvider.dispose();
		if (aggregationItemProvider != null) aggregationItemProvider.dispose();
		if (enablingItemProvider != null) enablingItemProvider.dispose();
		if (disablingItemProvider != null) disablingItemProvider.dispose();
		if (enablingWithInformationPassingItemProvider != null) enablingWithInformationPassingItemProvider.dispose();
		if (disablingWithInformationPassingItemProvider != null) disablingWithInformationPassingItemProvider.dispose();
		if (independentConcurrencyItemProvider != null) independentConcurrencyItemProvider.dispose();
		if (orderIndependenceItemProvider != null) orderIndependenceItemProvider.dispose();
		if (suspendResumeItemProvider != null) suspendResumeItemProvider.dispose();
		if (concurrencyWithInformationPassingItemProvider != null) concurrencyWithInformationPassingItemProvider.dispose();
		if (deterministicChoiceItemProvider != null) deterministicChoiceItemProvider.dispose();
		if (undeterministicChoiceItemProvider != null) undeterministicChoiceItemProvider.dispose();
	}

}
