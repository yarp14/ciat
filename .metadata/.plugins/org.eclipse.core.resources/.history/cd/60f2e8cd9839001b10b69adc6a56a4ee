/*
 * 
 */
package ciat.diagram.expressions;

/**
 * @generated
 */
public abstract class CiatAbstractExpression {

	/**
 * @generated
 */
	private org.eclipse.core.runtime.IStatus status = org.eclipse.core.runtime.Status.OK_STATUS;	

	/**
 * @generated
 */
	protected void setStatus(int severity, String message, Throwable throwable) {		
		String pluginID = ciat.diagram.part.CiatDiagramEditorPlugin.ID;
		this.status = new org.eclipse.core.runtime.Status(severity, pluginID, -1, (message != null) ? message : "", throwable); //$NON-NLS-1$
		if(!this.status.isOK()) {
			ciat.diagram.part.CiatDiagramEditorPlugin.getInstance().logError("Expression problem:" + message + "body:"+ body(), throwable); //$NON-NLS-1$ //$NON-NLS-2$
		}
	}

	/**
 * @generated
 */
	public org.eclipse.core.runtime.IStatus getStatus() {
		return status;
	}

	/**
 * @generated
 */
	private final String myBody;

	/**
 * @generated
 */
	public String body() {
		return myBody;
	}

	/**
 * @generated
 */
	private final org.eclipse.emf.ecore.EClassifier myContext;

	/**
 * @generated
 */
	public org.eclipse.emf.ecore.EClassifier context() {
		return myContext;
	}


	/**
 * @generated
 */
	protected CiatAbstractExpression(String body, org.eclipse.emf.ecore.EClassifier context) {
		myBody = body;
		myContext = context;
	}

	/**
 * @generated
 */
	@SuppressWarnings("rawtypes")
	protected abstract Object doEvaluate(Object context, java.util.Map env);

	/**
 * @generated
 */
	public Object evaluate(Object context) {
		return evaluate(context, java.util.Collections.EMPTY_MAP);
	}

	/**
 * @generated
 */
	@SuppressWarnings("rawtypes")
	public Object evaluate(Object context, java.util.Map env) {
		if(context().isInstance(context)) {
			try {
				return doEvaluate(context, env);
			} catch(Exception e) {
				ciat.diagram.part.CiatDiagramEditorPlugin.getInstance().logError("Expression evaluation failure: " + body(), e); //$NON-NLS-1$
			}
		}
		return null;
	}

	/**
 * Expression may return number value which is not directly compatible with feature type (e.g. Double when Integer is expected), or EEnumLiteral meta-object when literal instance is expected
 * @generated
 */
	public static Object performCast(Object value, org.eclipse.emf.ecore.EDataType targetType) {
		if (targetType instanceof org.eclipse.emf.ecore.EEnum) {
			if (value instanceof org.eclipse.emf.ecore.EEnumLiteral) {
				org.eclipse.emf.ecore.EEnumLiteral literal = (org.eclipse.emf.ecore.EEnumLiteral) value;
				return (literal.getInstance() != null) ? literal.getInstance() : literal;
			}
		}
		if (false == value instanceof Number || targetType == null || targetType.getInstanceClass() == null) {
			return value;
		}
		Class<?> targetClass = targetType.getInstanceClass();
		Number num = (Number) value;
		Class<?> valClass = value.getClass();
		Class<?> targetWrapperClass = targetClass;
		if (targetClass.isPrimitive()) {
			targetWrapperClass = org.eclipse.emf.ecore.util.EcoreUtil.wrapperClassFor(targetClass);
		}
		if (valClass.equals(targetWrapperClass)) {
			return value;
		}
		if (Number.class.isAssignableFrom(targetWrapperClass)) {
			if (targetWrapperClass.equals(Byte.class)) return new Byte(num.byteValue());
			if (targetWrapperClass.equals(Integer.class)) return new Integer(num.intValue());
			if (targetWrapperClass.equals(Short.class)) return new Short(num.shortValue());
			if (targetWrapperClass.equals(Long.class)) return new Long(num.longValue());
			if (targetWrapperClass.equals(java.math.BigInteger.class)) return java.math.BigInteger.valueOf(num.longValue());
			if (targetWrapperClass.equals(Float.class)) return new Float(num.floatValue());
			if (targetWrapperClass.equals(Double.class)) return new Double(num.doubleValue());
			if (targetWrapperClass.equals(java.math.BigDecimal.class)) return new java.math.BigDecimal(num.doubleValue());
		}
		return value;
	}

}
