	/*
 * 
 */
package ciat.diagram.navigator;

/**
 * @generated
 */
public class CiatNavigatorContentProvider implements org.eclipse.ui.navigator.ICommonContentProvider {

		/**
 * @generated
 */
private static final Object[] EMPTY_ARRAY = new Object[0];

	/**
 * @generated
 */
private org.eclipse.jface.viewers.Viewer myViewer;

	/**
 * @generated
 */
private org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain myEditingDomain;

	/**
 * @generated
 */
private org.eclipse.emf.workspace.util.WorkspaceSynchronizer myWorkspaceSynchronizer;

	/**
 * @generated
 */
private Runnable myViewerRefreshRunnable;
	
	/**
 * @generated
 */
@SuppressWarnings({ "unchecked", "serial", "rawtypes" })
public CiatNavigatorContentProvider() {
	org.eclipse.emf.transaction.TransactionalEditingDomain editingDomain = org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory.INSTANCE.createEditingDomain();
myEditingDomain = (org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain) editingDomain;
myEditingDomain.setResourceToReadOnlyMap(new java.util.HashMap() {
	public Object get(Object key) {
		if (!containsKey(key)) {
			put(key, Boolean.TRUE);
		}
		return super.get(key);
	}
});
myViewerRefreshRunnable = new Runnable() {
	public void run() {
		if (myViewer != null) {
			myViewer.refresh();
		}
	}
};
myWorkspaceSynchronizer = new org.eclipse.emf.workspace.util.WorkspaceSynchronizer(editingDomain, new org.eclipse.emf.workspace.util.WorkspaceSynchronizer.Delegate() {
	public void dispose() {
	}

	public boolean handleResourceChanged(final org.eclipse.emf.ecore.resource.Resource resource) {
		unloadAllResources();
asyncRefresh();
return true;
	}
	
	public boolean handleResourceDeleted(org.eclipse.emf.ecore.resource.Resource resource) {
		unloadAllResources();
asyncRefresh();
return true;
	}
	
	public boolean handleResourceMoved(org.eclipse.emf.ecore.resource.Resource resource, final org.eclipse.emf.common.util.URI newURI) {
		unloadAllResources();
asyncRefresh();
return true;
	}
});
}

		/**
 * @generated
 */
public void dispose() {
	myWorkspaceSynchronizer.dispose();
	myWorkspaceSynchronizer = null;
	myViewerRefreshRunnable = null;
	myViewer = null;
	unloadAllResources();
	((org.eclipse.emf.transaction.TransactionalEditingDomain) myEditingDomain).dispose();
	myEditingDomain = null;
}
	
		/**
 * @generated
 */
public void inputChanged(org.eclipse.jface.viewers.Viewer viewer, Object oldInput, Object newInput) {
	myViewer = viewer;
}
	
	
	/**
 * @generated
 */
	void unloadAllResources() {
		for (org.eclipse.emf.ecore.resource.Resource nextResource : myEditingDomain.getResourceSet().getResources()) {
			nextResource.unload();
		}
	}
	
	/**
 * @generated
 */
	void asyncRefresh() {
		if (myViewer != null && !myViewer.getControl().isDisposed()) {
			myViewer.getControl().getDisplay().asyncExec(myViewerRefreshRunnable);
		}
	}
	
	/**
 * @generated
 */
public Object[] getElements(Object inputElement) {
	return getChildren(inputElement);
}
	
	/**
 * @generated
 */
public void restoreState(org.eclipse.ui.IMemento aMemento) {
}

/**
 * @generated
 */
public void saveState(org.eclipse.ui.IMemento aMemento) {
}
    
    /**
 * @generated
 */
public void init(org.eclipse.ui.navigator.ICommonContentExtensionSite aConfig) {
}
    
    	/**
 * @generated
 */
public Object[] getChildren(Object parentElement) {
	if (parentElement instanceof org.eclipse.core.resources.IFile) {
		org.eclipse.core.resources.IFile file = (org.eclipse.core.resources.IFile) parentElement;
org.eclipse.emf.common.util.URI fileURI = org.eclipse.emf.common.util.URI.createPlatformResourceURI(file.getFullPath().toString(), true);
org.eclipse.emf.ecore.resource.Resource resource = myEditingDomain.getResourceSet().getResource(fileURI, true);
	java.util.ArrayList<ciat.diagram.navigator.CiatNavigatorItem> result = new java.util.ArrayList<ciat.diagram.navigator.CiatNavigatorItem>();
					java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> topViews = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>(resource.getContents().size());
		for (org.eclipse.emf.ecore.EObject o : resource.getContents()) {
			if (o instanceof org.eclipse.gmf.runtime.notation.View) {
				topViews.add((org.eclipse.gmf.runtime.notation.View) o);
			}
		}
					result.addAll(createNavigatorItems(selectViewsByType(topViews, ciat.diagram.edit.parts.CIATDiagramEditPart.MODEL_ID), file, false));
						return result.toArray();
   	} 
    	
   	if (parentElement instanceof ciat.diagram.navigator.CiatNavigatorGroup) {
	ciat.diagram.navigator.CiatNavigatorGroup group = (ciat.diagram.navigator.CiatNavigatorGroup) parentElement;
return group.getChildren();
	} 
		
	if (parentElement instanceof ciat.diagram.navigator.CiatNavigatorItem) {
	ciat.diagram.navigator.CiatNavigatorItem navigatorItem = (ciat.diagram.navigator.CiatNavigatorItem) parentElement;
if (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {
	return EMPTY_ARRAY;
}
return getViewChildren(navigatorItem.getView(), parentElement);
	}
		
			/*
 * Due to plugin.xml restrictions this code will be called only for views representing
 * shortcuts to this diagram elements created on other diagrams. 
*/ 
if (parentElement instanceof org.eclipse.core.runtime.IAdaptable) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) ((org.eclipse.core.runtime.IAdaptable) parentElement).getAdapter(org.eclipse.gmf.runtime.notation.View.class);
	if (view != null) {
		return getViewChildren(view, parentElement);
	}
}

		return EMPTY_ARRAY;
}
    
	/**
 * @generated
 */
private Object[] getViewChildren(org.eclipse.gmf.runtime.notation.View view, Object parentElement) {
   	switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(view)) {
	
case ciat.diagram.edit.parts.CIATDiagramEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
	result.addAll(getForeignShortcuts((org.eclipse.gmf.runtime.notation.Diagram) view, parentElement));
	org.eclipse.gmf.runtime.notation.Diagram sv = (org.eclipse.gmf.runtime.notation.Diagram) view;
				ciat.diagram.navigator.CiatNavigatorGroup links = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CIATDiagram_1000_links,
	"icons/linksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
																	connectedViews = 						getDiagramLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								links.addChildren(createNavigatorItems(connectedViews, links, false));
															if (!links.isEmpty()) {		result.add(links);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
							java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
											return result.toArray();
}

case ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
							java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
											return result.toArray();
}

case ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
							java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DomainDiagramDomainDiagramSharedContextCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
											return result.toArray();
}

case ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
							java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
											return result.toArray();
}

case ciat.diagram.edit.parts.RolEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3001_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3001_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3002_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3002_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3003_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3003_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3004_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3004_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3005_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3005_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualTask_3006_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualTask_3006_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskObjectsCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3007_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3007_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3008_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3008_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3009_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3009_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3010_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3010_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3011_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3011_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CooperativeTask_3014_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CooperativeTask_3014_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskObjectsCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3015_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3015_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3016_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3016_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3017_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3017_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3018_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3018_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3019_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3019_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeTask_3021_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeTask_3021_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3022_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Rol_3022_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3023_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Actor_3023_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3024_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SoftwareAgent_3024_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3025_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Team_3025_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3026_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Group_3026_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_AbstractTask_3028_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_AbstractTask_3028_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualTask_3029_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualTask_3029_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskObjectsCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CooperativeTask_3030_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CooperativeTask_3030_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskObjectsCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeTask_3031_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeTask_3031_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_AbstractTask_3032_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_AbstractTask_3032_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.InitEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Init_3033_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Init_3033_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.EndEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_End_3034_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_End_3034_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_TemporalCondition_3035_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_TemporalCondition_3035_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Notification_3036_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Notification_3036_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Condition_3037_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Condition_3037_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Init_3038_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Init_3038_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.End2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_End_3039_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_End_3039_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_TemporalCondition_3040_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_TemporalCondition_3040_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Notification_3041_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Notification_3041_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Condition_3042_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Condition_3042_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SharedObject_3043_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SharedObject_3043_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionAreaEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeAreaEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualAreaEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectSharedObjectAttributesCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AttributeEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 						getChildrenByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectSharedObjectOperationsCompartmentEditPart.VISUAL_ID));
									connectedViews = 						getChildrenByType						(connectedViews					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OperationEditPart.VISUAL_ID));
								result.addAll(createNavigatorItems(connectedViews, parentElement, false));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ExclusiveEdition_3049_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ExclusiveEdition_3049_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeVisualization_3050_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CollaborativeVisualization_3050_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualVisualization_3051_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndividualVisualization_3051_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_UserTask_3052_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_UserTask_3052_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CTTAbstractTask_3053_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CTTAbstractTask_3053_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_InteractiveTask_3054_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_InteractiveTask_3054_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CTTCollaborativeTask_3055_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_CTTCollaborativeTask_3055_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Node sv = (org.eclipse.gmf.runtime.notation.Node) view;
				ciat.diagram.navigator.CiatNavigatorGroup incominglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ApplicationTask_3056_incominglinks,
	"icons/incomingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup outgoinglinks = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ApplicationTask_3056_outgoinglinks,
	"icons/outgoingLinksNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
																	connectedViews = 			getIncomingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								incominglinks.addChildren(createNavigatorItems(connectedViews, incominglinks, true));
																	connectedViews = 			getOutgoingLinksByType						(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
								outgoinglinks.addChildren(createNavigatorItems(connectedViews, outgoinglinks, true));
															if (!incominglinks.isEmpty()) {		result.add(incominglinks);
					}							if (!outgoinglinks.isEmpty()) {		result.add(outgoinglinks);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Inheritance_4001_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Inheritance_4001_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Acting_4002_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Acting_4002_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Association_4003_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Association_4003_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.RolEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShAssociationLink_4004_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShAssociationLink_4004_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShGeneralizationLink_4005_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShGeneralizationLink_4005_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShAggregationLink_4006_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ShAggregationLink_4006_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Aggregation_4007_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Aggregation_4007_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Enabling_4008_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Enabling_4008_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Disabling_4009_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_Disabling_4009_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_EnablingWithInformationPassing_4010_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_EnablingWithInformationPassing_4010_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_DisablingWithInformationPassing_4011_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_DisablingWithInformationPassing_4011_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndependentConcurrency_4012_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_IndependentConcurrency_4012_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_OrderIndependence_4013_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_OrderIndependence_4013_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SuspendResume_4014_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_SuspendResume_4014_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ConcurrencyWithInformationPassing_4015_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_ConcurrencyWithInformationPassing_4015_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_DeterministicChoice_4016_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_DeterministicChoice_4016_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}

case ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID: {
	java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem> result = new java.util.LinkedList<ciat.diagram.navigator.CiatAbstractNavigatorItem>();
		org.eclipse.gmf.runtime.notation.Edge sv = (org.eclipse.gmf.runtime.notation.Edge) view;
				ciat.diagram.navigator.CiatNavigatorGroup target = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_UndeterministicChoice_4017_target,
	"icons/linkTargetNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
	ciat.diagram.navigator.CiatNavigatorGroup source = new ciat.diagram.navigator.CiatNavigatorGroup(
	ciat.diagram.part.Messages.NavigatorGroupName_UndeterministicChoice_4017_source,
	"icons/linkSourceNavigatorGroup.gif", parentElement);  //$NON-NLS-1$
				java.util.Collection<org.eclipse.gmf.runtime.notation.View> connectedViews;
														connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksTargetByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								target.addChildren(createNavigatorItems(connectedViews, target, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InitEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.EndEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.End2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
																	connectedViews = 	getLinksSourceByType					(java.util.Collections.singleton(sv)					, ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID));
								source.addChildren(createNavigatorItems(connectedViews, source, true));
															if (!target.isEmpty()) {		result.add(target);
					}							if (!source.isEmpty()) {		result.add(source);
					}			return result.toArray();
}
	}
	return EMPTY_ARRAY;
}
    
    /**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getLinksSourceByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Edge> edges, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.Edge nextEdge : edges) {
 		org.eclipse.gmf.runtime.notation.View nextEdgeSource = nextEdge.getSource();
 		if (type.equals(nextEdgeSource.getType()) && isOwnView(nextEdgeSource)) {
 			result.add(nextEdgeSource);
 		}
 	}
 	return result;
}
	
/**
 * @generated
 */
 private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getLinksTargetByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Edge> edges, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.Edge nextEdge : edges) {
 		org.eclipse.gmf.runtime.notation.View nextEdgeTarget = nextEdge.getTarget();
 		if (type.equals(nextEdgeTarget.getType()) && isOwnView(nextEdgeTarget)) {
 			result.add(nextEdgeTarget);
 		}
 	}
 	return result;
}

/**
 * @generated
 */
 private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getOutgoingLinksByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getSourceEdges(), type));
 	}
 	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getIncomingLinksByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
 	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getTargetEdges(), type));
 	}
 	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getChildrenByType(java.util.Collection<? extends org.eclipse.gmf.runtime.notation.View> nodes, String type) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.View nextNode : nodes) {
		result.addAll(selectViewsByType(nextNode.getChildren(), type));
	}
	return result;
}
	
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> getDiagramLinksByType(java.util.Collection<org.eclipse.gmf.runtime.notation.Diagram> diagrams, String type) {
	java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> result = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.Diagram nextDiagram : diagrams) {
		result.addAll(selectViewsByType(nextDiagram.getEdges(), type));
	}
	return result;
}

// TODO refactor as static method
/**
 * @generated
 */
private java.util.Collection<org.eclipse.gmf.runtime.notation.View> selectViewsByType(java.util.Collection<org.eclipse.gmf.runtime.notation.View> views, String type) {
	java.util.ArrayList<org.eclipse.gmf.runtime.notation.View> result = new java.util.ArrayList<org.eclipse.gmf.runtime.notation.View>();
	for (org.eclipse.gmf.runtime.notation.View nextView : views) {
		if (type.equals(nextView.getType()) && isOwnView(nextView)) {
			result.add(nextView);
		}
	}
	return result;
}
	
/**
 * @generated
 */
private boolean isOwnView(org.eclipse.gmf.runtime.notation.View view) {
	return ciat.diagram.edit.parts.CIATDiagramEditPart.MODEL_ID.equals(ciat.diagram.part.CiatVisualIDRegistry.getModelID(view));
}
	
/**
 * @generated
 */
private java.util.Collection<ciat.diagram.navigator.CiatNavigatorItem> createNavigatorItems(java.util.Collection<org.eclipse.gmf.runtime.notation.View> views, Object parent, boolean isLeafs) {
	java.util.ArrayList<ciat.diagram.navigator.CiatNavigatorItem> result = new java.util.ArrayList<ciat.diagram.navigator.CiatNavigatorItem>(views.size());
	for (org.eclipse.gmf.runtime.notation.View nextView : views) {
		result.add(new ciat.diagram.navigator.CiatNavigatorItem(nextView, parent, isLeafs));
	}
	return result;
}
		
/**
 * @generated
 */
private java.util.Collection<ciat.diagram.navigator.CiatNavigatorItem> getForeignShortcuts(org.eclipse.gmf.runtime.notation.Diagram diagram, Object parent) {
	java.util.LinkedList<org.eclipse.gmf.runtime.notation.View> result = new java.util.LinkedList<org.eclipse.gmf.runtime.notation.View>();
	for (java.util.Iterator<org.eclipse.gmf.runtime.notation.View> it = diagram.getChildren().iterator(); it.hasNext();) {
	org.eclipse.gmf.runtime.notation.View nextView = it.next();
		if (!isOwnView(nextView) && nextView.getEAnnotation("Shortcut") != null) { //$NON-NLS-1$
			result.add(nextView);
		}
	}
	return createNavigatorItems(result, parent, false);
}
		
	/**
 * @generated
 */
public Object getParent(Object element) {
	if (element instanceof ciat.diagram.navigator.CiatAbstractNavigatorItem) {
    	ciat.diagram.navigator.CiatAbstractNavigatorItem abstractNavigatorItem = (ciat.diagram.navigator.CiatAbstractNavigatorItem) element;
		return abstractNavigatorItem.getParent();
	}
	return null;
}
	
	/**
 * @generated
 */
public boolean hasChildren(Object element) {
	return element instanceof org.eclipse.core.resources.IFile || getChildren(element).length > 0;
}
    
    }
