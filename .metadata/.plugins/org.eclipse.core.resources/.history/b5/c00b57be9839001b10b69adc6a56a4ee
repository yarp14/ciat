/*
 * 
 */
package ciat.diagram.edit.parts;

/**
 * @generated
 */
public class CollaborativeTask2EditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 3031;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public CollaborativeTask2EditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CREATION_ROLE, new org.eclipse.gmf.tooling.runtime.edit.policies.reparent.CreationEditPolicyWithCustomReparent(ciat.diagram.part.CiatVisualIDRegistry.TYPED_INSTANCE));
	super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new ciat.diagram.edit.policies.CollaborativeTask2ItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.DRAG_DROP_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy());
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CANONICAL_ROLE, new ciat.diagram.edit.policies.CollaborativeTask2CanonicalEditPolicy());
		installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.OPEN_ROLE,
		new ciat.diagram.edit.policies.OpenDiagramEditPolicy());	// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
		}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
					org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
				org.eclipse.gmf.runtime.notation.View childView = (org.eclipse.gmf.runtime.notation.View) child.getModel();
switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(childView)) {
case ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID:	return new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy();
}
				org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure createNodeShape() {
		return primaryShape = new CollaborativeTaskFigure();
	}

		/**
 * @generated
 */
	public CollaborativeTaskFigure getPrimaryShape() {
		return (CollaborativeTaskFigure) primaryShape;
	}
	
		/**
 * @generated
 */
	protected boolean addFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskName2EditPart) {
			((ciat.diagram.edit.parts.CollaborativeTaskName2EditPart) childEditPart).setLabel(getPrimaryShape().getFigureCollaborativeTaskLabelFigure());
			return true;
		}
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getCollaborativeTaskTaskRolesCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getCollaborativeTaskTaskObjectsCompartmentFigure();
			setupContentPane(pane); // FIXME each comparment should handle his content pane in his own way 
			pane.add(((ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof ciat.diagram.edit.parts.ToolEditPart) {
			org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator locator = new org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator(getMainFigure(), org.eclipse.draw2d.PositionConstants.NORTH);
			getBorderedFigure().getBorderItemContainer().add(((ciat.diagram.edit.parts.ToolEditPart) childEditPart).getFigure(), locator);
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected boolean removeFixedChild(org.eclipse.gef.EditPart childEditPart) {
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskName2EditPart) {
			return true;
		}
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getCollaborativeTaskTaskRolesCompartmentFigure();
			pane.remove(((ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart) {
			org.eclipse.draw2d.IFigure pane = getPrimaryShape().getCollaborativeTaskTaskObjectsCompartmentFigure();
			pane.remove(((ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart) childEditPart).getFigure());
			return true;
		}	
		if (childEditPart instanceof ciat.diagram.edit.parts.ToolEditPart) {
			getBorderedFigure().getBorderItemContainer().remove(((ciat.diagram.edit.parts.ToolEditPart) childEditPart).getFigure());
			return true;
		}
		return false;
	}

		/**
 * @generated
 */
	protected void addChildVisual(org.eclipse.gef.EditPart childEditPart, int index) {
		if (addFixedChild(childEditPart)) {
			return;
		}
		super.addChildVisual(childEditPart, -1);
	}

		/**
 * @generated
 */
	protected void removeChildVisual(org.eclipse.gef.EditPart childEditPart) {
		if (removeFixedChild(childEditPart)){
			return;
		}
		super.removeChildVisual(childEditPart);
	}

		/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure getContentPaneFor(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart editPart) {
				if (editPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart) {
			return getPrimaryShape().getCollaborativeTaskTaskRolesCompartmentFigure();
		}	
		if (editPart instanceof ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart) {
			return getPrimaryShape().getCollaborativeTaskTaskObjectsCompartmentFigure();
		}	
		if (editPart instanceof org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart) {
			return getBorderedFigure().getBorderItemContainer();
		}
		return getContentPane();
	}

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createMainFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
					if (nodeShape.getLayoutManager() == null) {
									org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout layout =new org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout();
					layout.setSpacing(5);
					nodeShape.setLayoutManager(layout);
							}
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

				/**
 * @generated
 */
		public org.eclipse.gef.EditPart getPrimaryChildEditPart() {
			return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskName2EditPart.VISUAL_ID));
		}
	
	
	/**
 * @generated
 */
	public org.eclipse.gef.EditPart getTargetEditPart(org.eclipse.gef.Request request) {
		if (request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) {
			org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter adapter = ((org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest) request).getViewAndElementDescriptor().getCreateElementRequestAdapter();
			org.eclipse.gmf.runtime.emf.type.core.IElementType type = (org.eclipse.gmf.runtime.emf.type.core.IElementType) adapter.getAdapter(org.eclipse.gmf.runtime.emf.type.core.IElementType.class);
						if (type == ciat.diagram.providers.CiatElementTypes.Rol_3022) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
			}
					if (type == ciat.diagram.providers.CiatElementTypes.Actor_3023) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
			}
					if (type == ciat.diagram.providers.CiatElementTypes.SoftwareAgent_3024) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
			}
					if (type == ciat.diagram.providers.CiatElementTypes.Team_3025) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
			}
					if (type == ciat.diagram.providers.CiatElementTypes.Group_3026) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID));
			}
									if (type == ciat.diagram.providers.CiatElementTypes.Object_3027) {
				return getChildBySemanticHint(ciat.diagram.part.CiatVisualIDRegistry.getType(ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart.VISUAL_ID));
			}
					}
		return super.getTargetEditPart(request);
	}

	
	
	
/**
 * @generated
 */
public class CollaborativeTaskFigure extends org.eclipse.draw2d.RoundedRectangle {


	/**
	 * @generated
	 */
	private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureCollaborativeTaskLabelFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fCollaborativeTaskTaskRolesCompartmentFigure; 
	/**
	 * @generated
	 */
	private org.eclipse.draw2d.RectangleFigure fCollaborativeTaskTaskObjectsCompartmentFigure; 




	/**
	 * @generated
	 */
	public CollaborativeTaskFigure() {
				this.setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(8)
, getMapMode().DPtoLP(8)
));
		createContents();
	}
	/**
	 * @generated
	 */
	private void createContents(){


org.eclipse.draw2d.RectangleFigure collaborativeTaskFigure_Title0 = new org.eclipse.draw2d.RectangleFigure();

collaborativeTaskFigure_Title0.setFill(false);
collaborativeTaskFigure_Title0.setOutline(false);
collaborativeTaskFigure_Title0.setMaximumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(1000)
, getMapMode().DPtoLP(28)
));

collaborativeTaskFigure_Title0.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(5)
, getMapMode().DPtoLP(0)
, getMapMode().DPtoLP(5)
));

this.add(collaborativeTaskFigure_Title0);

	org.eclipse.draw2d.BorderLayout layoutCollaborativeTaskFigure_Title0 = new org.eclipse.draw2d.BorderLayout();
	collaborativeTaskFigure_Title0.setLayoutManager(layoutCollaborativeTaskFigure_Title0);



fFigureCollaborativeTaskLabelFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();

fFigureCollaborativeTaskLabelFigure.setText("CollaborativeTask");

collaborativeTaskFigure_Title0.add(fFigureCollaborativeTaskLabelFigure, org.eclipse.draw2d.BorderLayout.LEFT);




org.eclipse.draw2d.RectangleFigure collaborativeTaskFigure_Body0 = new org.eclipse.draw2d.RectangleFigure();

collaborativeTaskFigure_Body0.setOutline(false);

this.add(collaborativeTaskFigure_Body0);

	org.eclipse.draw2d.BorderLayout layoutCollaborativeTaskFigure_Body0 = new org.eclipse.draw2d.BorderLayout();
	collaborativeTaskFigure_Body0.setLayoutManager(layoutCollaborativeTaskFigure_Body0);



fCollaborativeTaskTaskRolesCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();


collaborativeTaskFigure_Body0.add(fCollaborativeTaskTaskRolesCompartmentFigure, org.eclipse.draw2d.BorderLayout.LEFT);



fCollaborativeTaskTaskObjectsCompartmentFigure = new org.eclipse.draw2d.RectangleFigure();


collaborativeTaskFigure_Body0.add(fCollaborativeTaskTaskObjectsCompartmentFigure, org.eclipse.draw2d.BorderLayout.CENTER);



	}





	/**
	 * @generated
	 */
	public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureCollaborativeTaskLabelFigure() {
		return fFigureCollaborativeTaskLabelFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getCollaborativeTaskTaskRolesCompartmentFigure() {
		return fCollaborativeTaskTaskRolesCompartmentFigure;
	}
	/**
	 * @generated
	 */
	public org.eclipse.draw2d.RectangleFigure getCollaborativeTaskTaskObjectsCompartmentFigure() {
		return fCollaborativeTaskTaskObjectsCompartmentFigure;
	}


}


	
	}
