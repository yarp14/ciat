	/*
 * 
 */
package ciat.diagram.part;

	/**
 * @generated
 */
public class CiatDiagramUpdater {
		
	/**
 * @generated
 */
public static boolean isShortcutOrphaned(org.eclipse.gmf.runtime.notation.View view) {
	return !view.isSetElement() || view.getElement() == null || view.getElement().eIsProxy();
}
	
		/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(view)) {
		case ciat.diagram.edit.parts.CIATDiagramEditPart.VISUAL_ID:
	return getCIATDiagram_1000SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID:
	return getIndividualTask_3006SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID:
	return getCooperativeTask_3014SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID:
	return getCollaborativeTask_3021SemanticChildren(view);
case ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID:
	return getAbstractTask_3028SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID:
	return getIndividualTask_3029SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID:
	return getCooperativeTask_3030SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID:
	return getCollaborativeTask_3031SemanticChildren(view);
case ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID:
	return getAbstractTask_3032SemanticChildren(view);
case ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID:
	return getSharedObject_3043SemanticChildren(view);
case ciat.diagram.edit.parts.SociogramSociogramItsSociogramNodesCompartmentEditPart.VISUAL_ID:
	return getSociogramSociogramItsSociogramNodesCompartment_7001SemanticChildren(view);
case ciat.diagram.edit.parts.ProcessDiagramProcessDiagramProcessNodesCompartmentEditPart.VISUAL_ID:
	return getProcessDiagramProcessDiagramProcessNodesCompartment_7002SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartmentEditPart.VISUAL_ID:
	return getIndividualTaskIndividualTaskTaskRolesCompartment_7003SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskObjectsCompartmentEditPart.VISUAL_ID:
	return getIndividualTaskIndividualTaskTaskObjectsCompartment_7004SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartmentEditPart.VISUAL_ID:
	return getCooperativeTaskCooperativeTaskTaskRolesCompartment_7005SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskObjectsCompartmentEditPart.VISUAL_ID:
	return getCooperativeTaskCooperativeTaskTaskObjectsCompartment_7006SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartmentEditPart.VISUAL_ID:
	return getCollaborativeTaskCollaborativeTaskTaskRolesCompartment_7007SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartmentEditPart.VISUAL_ID:
	return getCollaborativeTaskCollaborativeTaskTaskObjectsCompartment_7008SemanticChildren(view);
case ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartmentEditPart.VISUAL_ID:
	return getAbstractTaskAbstractTaskProcessNodesCompartment_7009SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskRolesCompartment2EditPart.VISUAL_ID:
	return getIndividualTaskIndividualTaskTaskRolesCompartment_7010SemanticChildren(view);
case ciat.diagram.edit.parts.IndividualTaskIndividualTaskTaskObjectsCompartment2EditPart.VISUAL_ID:
	return getIndividualTaskIndividualTaskTaskObjectsCompartment_7011SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskRolesCompartment2EditPart.VISUAL_ID:
	return getCooperativeTaskCooperativeTaskTaskRolesCompartment_7012SemanticChildren(view);
case ciat.diagram.edit.parts.CooperativeTaskCooperativeTaskTaskObjectsCompartment2EditPart.VISUAL_ID:
	return getCooperativeTaskCooperativeTaskTaskObjectsCompartment_7013SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskRolesCompartment2EditPart.VISUAL_ID:
	return getCollaborativeTaskCollaborativeTaskTaskRolesCompartment_7014SemanticChildren(view);
case ciat.diagram.edit.parts.CollaborativeTaskCollaborativeTaskTaskObjectsCompartment2EditPart.VISUAL_ID:
	return getCollaborativeTaskCollaborativeTaskTaskObjectsCompartment_7015SemanticChildren(view);
case ciat.diagram.edit.parts.AbstractTaskAbstractTaskProcessNodesCompartment2EditPart.VISUAL_ID:
	return getAbstractTaskAbstractTaskProcessNodesCompartment_7016SemanticChildren(view);
case ciat.diagram.edit.parts.DomainDiagramDomainDiagramSharedContextCompartmentEditPart.VISUAL_ID:
	return getDomainDiagramDomainDiagramSharedContextCompartment_7017SemanticChildren(view);
case ciat.diagram.edit.parts.SharedObjectSharedObjectAttributesCompartmentEditPart.VISUAL_ID:
	return getSharedObjectSharedObjectAttributesCompartment_7018SemanticChildren(view);
case ciat.diagram.edit.parts.SharedObjectSharedObjectOperationsCompartmentEditPart.VISUAL_ID:
	return getSharedObjectSharedObjectOperationsCompartment_7019SemanticChildren(view);
case ciat.diagram.edit.parts.CTTDiagramCTTDiagramCttTasksCompartmentEditPart.VISUAL_ID:
	return getCTTDiagramCTTDiagramCttTasksCompartment_7020SemanticChildren(view);
	}
		return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCIATDiagram_1000SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CIATDiagram modelElement = (ciat.CIATDiagram) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getItsSociograms().iterator(); it.hasNext();) {
		ciat.Sociogram childElement = (ciat.Sociogram) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getItsProcessDiagrams().iterator(); it.hasNext();) {
		ciat.ProcessDiagram childElement = (ciat.ProcessDiagram) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getItsDomainDiagrams().iterator(); it.hasNext();) {
		ciat.DomainDiagram childElement = (ciat.DomainDiagram) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
						for (java.util.Iterator<?> it = modelElement.getItsCttDiagrams().iterator(); it.hasNext();) {
		ciat.CTTDiagram childElement = (ciat.CTTDiagram) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTask_3006SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTask_3014SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTask_3021SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getAbstractTask_3028SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTask_3029SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTask_3030SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTask_3031SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getAbstractTask_3032SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTools().iterator(); it.hasNext();) {
		ciat.Tool childElement = (ciat.Tool) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSharedObject_3043SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (!view.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.SharedObject modelElement = (ciat.SharedObject) view.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						{ ciat.VisualizationArea childElement = modelElement.getVAreas();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ExclusiveEditionAreaEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.CollaborativeAreaEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.IndividualAreaEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSociogramSociogramItsSociogramNodesCompartment_7001SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.Sociogram modelElement = (ciat.Sociogram) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getItsSociogramNodes().iterator(); it.hasNext();) {
		ciat.SociogramNode childElement = (ciat.SociogramNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.RolEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getProcessDiagramProcessDiagramProcessNodesCompartment_7002SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.ProcessDiagram modelElement = (ciat.ProcessDiagram) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getProcessNodes().iterator(); it.hasNext();) {
		ciat.ProcessNode childElement = (ciat.ProcessNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.End2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTaskIndividualTaskTaskRolesCompartment_7003SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						{ ciat.SociogramNode childElement = modelElement.getTaskRoles();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTaskIndividualTaskTaskObjectsCompartment_7004SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTaskCooperativeTaskTaskRolesCompartment_7005SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskRoles().iterator(); it.hasNext();) {
		ciat.SociogramNode childElement = (ciat.SociogramNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTaskCooperativeTaskTaskObjectsCompartment_7006SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTaskCollaborativeTaskTaskRolesCompartment_7007SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskRoles().iterator(); it.hasNext();) {
		ciat.SociogramNode childElement = (ciat.SociogramNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTaskCollaborativeTaskTaskObjectsCompartment_7008SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getAbstractTaskAbstractTaskProcessNodesCompartment_7009SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.AbstractTask modelElement = (ciat.AbstractTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getProcessNodes().iterator(); it.hasNext();) {
		ciat.ProcessNode childElement = (ciat.ProcessNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.InitEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.EndEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTaskIndividualTaskTaskRolesCompartment_7010SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						{ ciat.SociogramNode childElement = modelElement.getTaskRoles();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
if (visualID == ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getIndividualTaskIndividualTaskTaskObjectsCompartment_7011SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.IndividualTask modelElement = (ciat.IndividualTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTaskCooperativeTaskTaskRolesCompartment_7012SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskRoles().iterator(); it.hasNext();) {
		ciat.SociogramNode childElement = (ciat.SociogramNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCooperativeTaskCooperativeTaskTaskObjectsCompartment_7013SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CooperativeTask modelElement = (ciat.CooperativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTaskCollaborativeTaskTaskRolesCompartment_7014SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskRoles().iterator(); it.hasNext();) {
		ciat.SociogramNode childElement = (ciat.SociogramNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCollaborativeTaskCollaborativeTaskTaskObjectsCompartment_7015SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getTaskObjects().iterator(); it.hasNext();) {
		ciat.Object childElement = (ciat.Object) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getAbstractTaskAbstractTaskProcessNodesCompartment_7016SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.AbstractTask modelElement = (ciat.AbstractTask) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getProcessNodes().iterator(); it.hasNext();) {
		ciat.ProcessNode childElement = (ciat.ProcessNode) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.InitEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.EndEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getDomainDiagramDomainDiagramSharedContextCompartment_7017SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.DomainDiagram modelElement = (ciat.DomainDiagram) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getSharedContext().iterator(); it.hasNext();) {
		ciat.SharedObject childElement = (ciat.SharedObject) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSharedObjectSharedObjectAttributesCompartment_7018SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.SharedObject modelElement = (ciat.SharedObject) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getAttributes().iterator(); it.hasNext();) {
		ciat.Attribute childElement = (ciat.Attribute) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.AttributeEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSharedObjectSharedObjectOperationsCompartment_7019SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.SharedObject modelElement = (ciat.SharedObject) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getOperations().iterator(); it.hasNext();) {
		ciat.Operation childElement = (ciat.Operation) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.OperationEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}

	/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatNodeDescriptor> getCTTDiagramCTTDiagramCttTasksCompartment_7020SemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
		if (false == view.eContainer() instanceof org.eclipse.gmf.runtime.notation.View) {
	return java.util.Collections.emptyList();
}
org.eclipse.gmf.runtime.notation.View containerView = (org.eclipse.gmf.runtime.notation.View) view.eContainer();
if (!containerView.isSetElement()) {
	return java.util.Collections.emptyList();
}
ciat.CTTDiagram modelElement = (ciat.CTTDiagram) containerView.getElement();
	java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatNodeDescriptor>();
						for (java.util.Iterator<?> it = modelElement.getCttTasks().iterator(); it.hasNext();) {
		ciat.CTTTask childElement = (ciat.CTTTask) it.next();
					int visualID = ciat.diagram.part.CiatVisualIDRegistry.getNodeVisualID(view, childElement);
			if (visualID == ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
if (visualID == ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID) {
	result.add(new ciat.diagram.part.CiatNodeDescriptor(childElement, visualID));
	continue;
}
	}
			return result;
	}
	
		/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(view)) {
		case ciat.diagram.edit.parts.CIATDiagramEditPart.VISUAL_ID:
	return getCIATDiagram_1000ContainedLinks(view);
case ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID:
	return getSociogram_2001ContainedLinks(view);
case ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID:
	return getProcessDiagram_2002ContainedLinks(view);
case ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID:
	return getDomainDiagram_2003ContainedLinks(view);
case ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID:
	return getCTTDiagram_2004ContainedLinks(view);
case ciat.diagram.edit.parts.RolEditPart.VISUAL_ID:
	return getRol_3001ContainedLinks(view);
case ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID:
	return getActor_3002ContainedLinks(view);
case ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID:
	return getSoftwareAgent_3003ContainedLinks(view);
case ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID:
	return getTeam_3004ContainedLinks(view);
case ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID:
	return getGroup_3005ContainedLinks(view);
case ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID:
	return getIndividualTask_3006ContainedLinks(view);
case ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID:
	return getRol_3007ContainedLinks(view);
case ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID:
	return getActor_3008ContainedLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID:
	return getSoftwareAgent_3009ContainedLinks(view);
case ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID:
	return getTeam_3010ContainedLinks(view);
case ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID:
	return getGroup_3011ContainedLinks(view);
case ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID:
	return getTool_3012ContainedLinks(view);
case ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID:
	return getObject_3013ContainedLinks(view);
case ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID:
	return getCooperativeTask_3014ContainedLinks(view);
case ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID:
	return getRol_3015ContainedLinks(view);
case ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID:
	return getActor_3016ContainedLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID:
	return getSoftwareAgent_3017ContainedLinks(view);
case ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID:
	return getTeam_3018ContainedLinks(view);
case ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID:
	return getGroup_3019ContainedLinks(view);
case ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID:
	return getObject_3020ContainedLinks(view);
case ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID:
	return getCollaborativeTask_3021ContainedLinks(view);
case ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID:
	return getRol_3022ContainedLinks(view);
case ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID:
	return getActor_3023ContainedLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID:
	return getSoftwareAgent_3024ContainedLinks(view);
case ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID:
	return getTeam_3025ContainedLinks(view);
case ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID:
	return getGroup_3026ContainedLinks(view);
case ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID:
	return getObject_3027ContainedLinks(view);
case ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID:
	return getAbstractTask_3028ContainedLinks(view);
case ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID:
	return getIndividualTask_3029ContainedLinks(view);
case ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID:
	return getCooperativeTask_3030ContainedLinks(view);
case ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID:
	return getCollaborativeTask_3031ContainedLinks(view);
case ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID:
	return getAbstractTask_3032ContainedLinks(view);
case ciat.diagram.edit.parts.InitEditPart.VISUAL_ID:
	return getInit_3033ContainedLinks(view);
case ciat.diagram.edit.parts.EndEditPart.VISUAL_ID:
	return getEnd_3034ContainedLinks(view);
case ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID:
	return getTemporalCondition_3035ContainedLinks(view);
case ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID:
	return getNotification_3036ContainedLinks(view);
case ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID:
	return getCondition_3037ContainedLinks(view);
case ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID:
	return getInit_3038ContainedLinks(view);
case ciat.diagram.edit.parts.End2EditPart.VISUAL_ID:
	return getEnd_3039ContainedLinks(view);
case ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID:
	return getTemporalCondition_3040ContainedLinks(view);
case ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID:
	return getNotification_3041ContainedLinks(view);
case ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID:
	return getCondition_3042ContainedLinks(view);
case ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID:
	return getSharedObject_3043ContainedLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionAreaEditPart.VISUAL_ID:
	return getExclusiveEditionArea_3044ContainedLinks(view);
case ciat.diagram.edit.parts.CollaborativeAreaEditPart.VISUAL_ID:
	return getCollaborativeArea_3045ContainedLinks(view);
case ciat.diagram.edit.parts.IndividualAreaEditPart.VISUAL_ID:
	return getIndividualArea_3046ContainedLinks(view);
case ciat.diagram.edit.parts.AttributeEditPart.VISUAL_ID:
	return getAttribute_3047ContainedLinks(view);
case ciat.diagram.edit.parts.OperationEditPart.VISUAL_ID:
	return getOperation_3048ContainedLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID:
	return getExclusiveEdition_3049ContainedLinks(view);
case ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID:
	return getCollaborativeVisualization_3050ContainedLinks(view);
case ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID:
	return getIndividualVisualization_3051ContainedLinks(view);
case ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID:
	return getUserTask_3052ContainedLinks(view);
case ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID:
	return getCTTAbstractTask_3053ContainedLinks(view);
case ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID:
	return getInteractiveTask_3054ContainedLinks(view);
case ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID:
	return getCTTCollaborativeTask_3055ContainedLinks(view);
case ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID:
	return getApplicationTask_3056ContainedLinks(view);
case ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID:
	return getInheritance_4001ContainedLinks(view);
case ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID:
	return getActing_4002ContainedLinks(view);
case ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID:
	return getAssociation_4003ContainedLinks(view);
case ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID:
	return getShAssociationLink_4004ContainedLinks(view);
case ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID:
	return getShGeneralizationLink_4005ContainedLinks(view);
case ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID:
	return getShAggregationLink_4006ContainedLinks(view);
case ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID:
	return getAggregation_4007ContainedLinks(view);
case ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID:
	return getEnabling_4008ContainedLinks(view);
case ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID:
	return getDisabling_4009ContainedLinks(view);
case ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID:
	return getEnablingWithInformationPassing_4010ContainedLinks(view);
case ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID:
	return getDisablingWithInformationPassing_4011ContainedLinks(view);
case ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID:
	return getIndependentConcurrency_4012ContainedLinks(view);
case ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID:
	return getOrderIndependence_4013ContainedLinks(view);
case ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID:
	return getSuspendResume_4014ContainedLinks(view);
case ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID:
	return getConcurrencyWithInformationPassing_4015ContainedLinks(view);
case ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID:
	return getDeterministicChoice_4016ContainedLinks(view);
case ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID:
	return getUndeterministicChoice_4017ContainedLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(view)) {
		case ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID:
	return getSociogram_2001IncomingLinks(view);
case ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID:
	return getProcessDiagram_2002IncomingLinks(view);
case ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID:
	return getDomainDiagram_2003IncomingLinks(view);
case ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID:
	return getCTTDiagram_2004IncomingLinks(view);
case ciat.diagram.edit.parts.RolEditPart.VISUAL_ID:
	return getRol_3001IncomingLinks(view);
case ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID:
	return getActor_3002IncomingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID:
	return getSoftwareAgent_3003IncomingLinks(view);
case ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID:
	return getTeam_3004IncomingLinks(view);
case ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID:
	return getGroup_3005IncomingLinks(view);
case ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID:
	return getIndividualTask_3006IncomingLinks(view);
case ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID:
	return getRol_3007IncomingLinks(view);
case ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID:
	return getActor_3008IncomingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID:
	return getSoftwareAgent_3009IncomingLinks(view);
case ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID:
	return getTeam_3010IncomingLinks(view);
case ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID:
	return getGroup_3011IncomingLinks(view);
case ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID:
	return getTool_3012IncomingLinks(view);
case ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID:
	return getObject_3013IncomingLinks(view);
case ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID:
	return getCooperativeTask_3014IncomingLinks(view);
case ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID:
	return getRol_3015IncomingLinks(view);
case ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID:
	return getActor_3016IncomingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID:
	return getSoftwareAgent_3017IncomingLinks(view);
case ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID:
	return getTeam_3018IncomingLinks(view);
case ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID:
	return getGroup_3019IncomingLinks(view);
case ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID:
	return getObject_3020IncomingLinks(view);
case ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID:
	return getCollaborativeTask_3021IncomingLinks(view);
case ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID:
	return getRol_3022IncomingLinks(view);
case ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID:
	return getActor_3023IncomingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID:
	return getSoftwareAgent_3024IncomingLinks(view);
case ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID:
	return getTeam_3025IncomingLinks(view);
case ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID:
	return getGroup_3026IncomingLinks(view);
case ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID:
	return getObject_3027IncomingLinks(view);
case ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID:
	return getAbstractTask_3028IncomingLinks(view);
case ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID:
	return getIndividualTask_3029IncomingLinks(view);
case ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID:
	return getCooperativeTask_3030IncomingLinks(view);
case ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID:
	return getCollaborativeTask_3031IncomingLinks(view);
case ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID:
	return getAbstractTask_3032IncomingLinks(view);
case ciat.diagram.edit.parts.InitEditPart.VISUAL_ID:
	return getInit_3033IncomingLinks(view);
case ciat.diagram.edit.parts.EndEditPart.VISUAL_ID:
	return getEnd_3034IncomingLinks(view);
case ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID:
	return getTemporalCondition_3035IncomingLinks(view);
case ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID:
	return getNotification_3036IncomingLinks(view);
case ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID:
	return getCondition_3037IncomingLinks(view);
case ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID:
	return getInit_3038IncomingLinks(view);
case ciat.diagram.edit.parts.End2EditPart.VISUAL_ID:
	return getEnd_3039IncomingLinks(view);
case ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID:
	return getTemporalCondition_3040IncomingLinks(view);
case ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID:
	return getNotification_3041IncomingLinks(view);
case ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID:
	return getCondition_3042IncomingLinks(view);
case ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID:
	return getSharedObject_3043IncomingLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionAreaEditPart.VISUAL_ID:
	return getExclusiveEditionArea_3044IncomingLinks(view);
case ciat.diagram.edit.parts.CollaborativeAreaEditPart.VISUAL_ID:
	return getCollaborativeArea_3045IncomingLinks(view);
case ciat.diagram.edit.parts.IndividualAreaEditPart.VISUAL_ID:
	return getIndividualArea_3046IncomingLinks(view);
case ciat.diagram.edit.parts.AttributeEditPart.VISUAL_ID:
	return getAttribute_3047IncomingLinks(view);
case ciat.diagram.edit.parts.OperationEditPart.VISUAL_ID:
	return getOperation_3048IncomingLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID:
	return getExclusiveEdition_3049IncomingLinks(view);
case ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID:
	return getCollaborativeVisualization_3050IncomingLinks(view);
case ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID:
	return getIndividualVisualization_3051IncomingLinks(view);
case ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID:
	return getUserTask_3052IncomingLinks(view);
case ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID:
	return getCTTAbstractTask_3053IncomingLinks(view);
case ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID:
	return getInteractiveTask_3054IncomingLinks(view);
case ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID:
	return getCTTCollaborativeTask_3055IncomingLinks(view);
case ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID:
	return getApplicationTask_3056IncomingLinks(view);
case ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID:
	return getInheritance_4001IncomingLinks(view);
case ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID:
	return getActing_4002IncomingLinks(view);
case ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID:
	return getAssociation_4003IncomingLinks(view);
case ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID:
	return getShAssociationLink_4004IncomingLinks(view);
case ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID:
	return getShGeneralizationLink_4005IncomingLinks(view);
case ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID:
	return getShAggregationLink_4006IncomingLinks(view);
case ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID:
	return getAggregation_4007IncomingLinks(view);
case ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID:
	return getEnabling_4008IncomingLinks(view);
case ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID:
	return getDisabling_4009IncomingLinks(view);
case ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID:
	return getEnablingWithInformationPassing_4010IncomingLinks(view);
case ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID:
	return getDisablingWithInformationPassing_4011IncomingLinks(view);
case ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID:
	return getIndependentConcurrency_4012IncomingLinks(view);
case ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID:
	return getOrderIndependence_4013IncomingLinks(view);
case ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID:
	return getSuspendResume_4014IncomingLinks(view);
case ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID:
	return getConcurrencyWithInformationPassing_4015IncomingLinks(view);
case ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID:
	return getDeterministicChoice_4016IncomingLinks(view);
case ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID:
	return getUndeterministicChoice_4017IncomingLinks(view);
	}
		return java.util.Collections.emptyList();
}
	
		/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
		switch (ciat.diagram.part.CiatVisualIDRegistry.getVisualID(view)) {
		case ciat.diagram.edit.parts.SociogramEditPart.VISUAL_ID:
	return getSociogram_2001OutgoingLinks(view);
case ciat.diagram.edit.parts.ProcessDiagramEditPart.VISUAL_ID:
	return getProcessDiagram_2002OutgoingLinks(view);
case ciat.diagram.edit.parts.DomainDiagramEditPart.VISUAL_ID:
	return getDomainDiagram_2003OutgoingLinks(view);
case ciat.diagram.edit.parts.CTTDiagramEditPart.VISUAL_ID:
	return getCTTDiagram_2004OutgoingLinks(view);
case ciat.diagram.edit.parts.RolEditPart.VISUAL_ID:
	return getRol_3001OutgoingLinks(view);
case ciat.diagram.edit.parts.ActorEditPart.VISUAL_ID:
	return getActor_3002OutgoingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgentEditPart.VISUAL_ID:
	return getSoftwareAgent_3003OutgoingLinks(view);
case ciat.diagram.edit.parts.TeamEditPart.VISUAL_ID:
	return getTeam_3004OutgoingLinks(view);
case ciat.diagram.edit.parts.GroupEditPart.VISUAL_ID:
	return getGroup_3005OutgoingLinks(view);
case ciat.diagram.edit.parts.IndividualTaskEditPart.VISUAL_ID:
	return getIndividualTask_3006OutgoingLinks(view);
case ciat.diagram.edit.parts.Rol2EditPart.VISUAL_ID:
	return getRol_3007OutgoingLinks(view);
case ciat.diagram.edit.parts.Actor2EditPart.VISUAL_ID:
	return getActor_3008OutgoingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent2EditPart.VISUAL_ID:
	return getSoftwareAgent_3009OutgoingLinks(view);
case ciat.diagram.edit.parts.Team2EditPart.VISUAL_ID:
	return getTeam_3010OutgoingLinks(view);
case ciat.diagram.edit.parts.Group2EditPart.VISUAL_ID:
	return getGroup_3011OutgoingLinks(view);
case ciat.diagram.edit.parts.ToolEditPart.VISUAL_ID:
	return getTool_3012OutgoingLinks(view);
case ciat.diagram.edit.parts.ObjectEditPart.VISUAL_ID:
	return getObject_3013OutgoingLinks(view);
case ciat.diagram.edit.parts.CooperativeTaskEditPart.VISUAL_ID:
	return getCooperativeTask_3014OutgoingLinks(view);
case ciat.diagram.edit.parts.Rol3EditPart.VISUAL_ID:
	return getRol_3015OutgoingLinks(view);
case ciat.diagram.edit.parts.Actor3EditPart.VISUAL_ID:
	return getActor_3016OutgoingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent3EditPart.VISUAL_ID:
	return getSoftwareAgent_3017OutgoingLinks(view);
case ciat.diagram.edit.parts.Team3EditPart.VISUAL_ID:
	return getTeam_3018OutgoingLinks(view);
case ciat.diagram.edit.parts.Group3EditPart.VISUAL_ID:
	return getGroup_3019OutgoingLinks(view);
case ciat.diagram.edit.parts.Object2EditPart.VISUAL_ID:
	return getObject_3020OutgoingLinks(view);
case ciat.diagram.edit.parts.CollaborativeTaskEditPart.VISUAL_ID:
	return getCollaborativeTask_3021OutgoingLinks(view);
case ciat.diagram.edit.parts.Rol4EditPart.VISUAL_ID:
	return getRol_3022OutgoingLinks(view);
case ciat.diagram.edit.parts.Actor4EditPart.VISUAL_ID:
	return getActor_3023OutgoingLinks(view);
case ciat.diagram.edit.parts.SoftwareAgent4EditPart.VISUAL_ID:
	return getSoftwareAgent_3024OutgoingLinks(view);
case ciat.diagram.edit.parts.Team4EditPart.VISUAL_ID:
	return getTeam_3025OutgoingLinks(view);
case ciat.diagram.edit.parts.Group4EditPart.VISUAL_ID:
	return getGroup_3026OutgoingLinks(view);
case ciat.diagram.edit.parts.Object3EditPart.VISUAL_ID:
	return getObject_3027OutgoingLinks(view);
case ciat.diagram.edit.parts.AbstractTaskEditPart.VISUAL_ID:
	return getAbstractTask_3028OutgoingLinks(view);
case ciat.diagram.edit.parts.IndividualTask2EditPart.VISUAL_ID:
	return getIndividualTask_3029OutgoingLinks(view);
case ciat.diagram.edit.parts.CooperativeTask2EditPart.VISUAL_ID:
	return getCooperativeTask_3030OutgoingLinks(view);
case ciat.diagram.edit.parts.CollaborativeTask2EditPart.VISUAL_ID:
	return getCollaborativeTask_3031OutgoingLinks(view);
case ciat.diagram.edit.parts.AbstractTask2EditPart.VISUAL_ID:
	return getAbstractTask_3032OutgoingLinks(view);
case ciat.diagram.edit.parts.InitEditPart.VISUAL_ID:
	return getInit_3033OutgoingLinks(view);
case ciat.diagram.edit.parts.EndEditPart.VISUAL_ID:
	return getEnd_3034OutgoingLinks(view);
case ciat.diagram.edit.parts.TemporalConditionEditPart.VISUAL_ID:
	return getTemporalCondition_3035OutgoingLinks(view);
case ciat.diagram.edit.parts.NotificationEditPart.VISUAL_ID:
	return getNotification_3036OutgoingLinks(view);
case ciat.diagram.edit.parts.ConditionEditPart.VISUAL_ID:
	return getCondition_3037OutgoingLinks(view);
case ciat.diagram.edit.parts.Init2EditPart.VISUAL_ID:
	return getInit_3038OutgoingLinks(view);
case ciat.diagram.edit.parts.End2EditPart.VISUAL_ID:
	return getEnd_3039OutgoingLinks(view);
case ciat.diagram.edit.parts.TemporalCondition2EditPart.VISUAL_ID:
	return getTemporalCondition_3040OutgoingLinks(view);
case ciat.diagram.edit.parts.Notification2EditPart.VISUAL_ID:
	return getNotification_3041OutgoingLinks(view);
case ciat.diagram.edit.parts.Condition2EditPart.VISUAL_ID:
	return getCondition_3042OutgoingLinks(view);
case ciat.diagram.edit.parts.SharedObjectEditPart.VISUAL_ID:
	return getSharedObject_3043OutgoingLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionAreaEditPart.VISUAL_ID:
	return getExclusiveEditionArea_3044OutgoingLinks(view);
case ciat.diagram.edit.parts.CollaborativeAreaEditPart.VISUAL_ID:
	return getCollaborativeArea_3045OutgoingLinks(view);
case ciat.diagram.edit.parts.IndividualAreaEditPart.VISUAL_ID:
	return getIndividualArea_3046OutgoingLinks(view);
case ciat.diagram.edit.parts.AttributeEditPart.VISUAL_ID:
	return getAttribute_3047OutgoingLinks(view);
case ciat.diagram.edit.parts.OperationEditPart.VISUAL_ID:
	return getOperation_3048OutgoingLinks(view);
case ciat.diagram.edit.parts.ExclusiveEditionEditPart.VISUAL_ID:
	return getExclusiveEdition_3049OutgoingLinks(view);
case ciat.diagram.edit.parts.CollaborativeVisualizationEditPart.VISUAL_ID:
	return getCollaborativeVisualization_3050OutgoingLinks(view);
case ciat.diagram.edit.parts.IndividualVisualizationEditPart.VISUAL_ID:
	return getIndividualVisualization_3051OutgoingLinks(view);
case ciat.diagram.edit.parts.UserTaskEditPart.VISUAL_ID:
	return getUserTask_3052OutgoingLinks(view);
case ciat.diagram.edit.parts.CTTAbstractTaskEditPart.VISUAL_ID:
	return getCTTAbstractTask_3053OutgoingLinks(view);
case ciat.diagram.edit.parts.InteractiveTaskEditPart.VISUAL_ID:
	return getInteractiveTask_3054OutgoingLinks(view);
case ciat.diagram.edit.parts.CTTCollaborativeTaskEditPart.VISUAL_ID:
	return getCTTCollaborativeTask_3055OutgoingLinks(view);
case ciat.diagram.edit.parts.ApplicationTaskEditPart.VISUAL_ID:
	return getApplicationTask_3056OutgoingLinks(view);
case ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID:
	return getInheritance_4001OutgoingLinks(view);
case ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID:
	return getActing_4002OutgoingLinks(view);
case ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID:
	return getAssociation_4003OutgoingLinks(view);
case ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID:
	return getShAssociationLink_4004OutgoingLinks(view);
case ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID:
	return getShGeneralizationLink_4005OutgoingLinks(view);
case ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID:
	return getShAggregationLink_4006OutgoingLinks(view);
case ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID:
	return getAggregation_4007OutgoingLinks(view);
case ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID:
	return getEnabling_4008OutgoingLinks(view);
case ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID:
	return getDisabling_4009OutgoingLinks(view);
case ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID:
	return getEnablingWithInformationPassing_4010OutgoingLinks(view);
case ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID:
	return getDisablingWithInformationPassing_4011OutgoingLinks(view);
case ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID:
	return getIndependentConcurrency_4012OutgoingLinks(view);
case ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID:
	return getOrderIndependence_4013OutgoingLinks(view);
case ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID:
	return getSuspendResume_4014OutgoingLinks(view);
case ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID:
	return getConcurrencyWithInformationPassing_4015OutgoingLinks(view);
case ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID:
	return getDeterministicChoice_4016OutgoingLinks(view);
case ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID:
	return getUndeterministicChoice_4017OutgoingLinks(view);
	}
		return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCIATDiagram_1000ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CIATDiagram modelElement = (ciat.CIATDiagram) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getContainedTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_Association_4003(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ShAssociationLink_4004(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ShGeneralizationLink_4005(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ShAggregationLink_4006(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getContainedTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSociogram_2001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getProcessDiagram_2002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDomainDiagram_2003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTDiagram_2004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3006ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3007ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3008ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3009ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3010ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3011ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTool_3012ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3013ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3014ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3015ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3016ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3017ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3018ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3019ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3020ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3021ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3022ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3023ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3024ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3025ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3026ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3027ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3028ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3029ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3030ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3031ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3032ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3033ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3034ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3035ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3036ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3037ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3038ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3039ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3040ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3041ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3042ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSharedObject_3043ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEditionArea_3044ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeArea_3045ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualArea_3046ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAttribute_3047ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOperation_3048ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEdition_3049ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeVisualization_3050ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualVisualization_3051ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUserTask_3052ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTAbstractTask_3053ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInteractiveTask_3054ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTCollaborativeTask_3055ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getApplicationTask_3056ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInheritance_4001ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActing_4002ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAssociation_4003ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAssociationLink_4004ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShGeneralizationLink_4005ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAggregationLink_4006ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAggregation_4007ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnabling_4008ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisabling_4009ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnablingWithInformationPassing_4010ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisablingWithInformationPassing_4011ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndependentConcurrency_4012ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOrderIndependence_4013ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSuspendResume_4014ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getConcurrencyWithInformationPassing_4015ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDeterministicChoice_4016ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUndeterministicChoice_4017ContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSociogram_2001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getProcessDiagram_2002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDomainDiagram_2003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTDiagram_2004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3006IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3007IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3008IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3009IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3010IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3011IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTool_3012IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3013IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3014IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3015IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3016IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3017IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3018IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3019IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3020IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3021IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3022IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3023IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3024IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3025IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3026IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Inheritance_4001(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Acting_4002(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Association_4003(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3027IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3028IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3029IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3030IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3031IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3032IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3033IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Init modelElement = (ciat.Init) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3034IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.End modelElement = (ciat.End) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3035IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.TemporalCondition modelElement = (ciat.TemporalCondition) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3036IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Notification modelElement = (ciat.Notification) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3037IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Condition modelElement = (ciat.Condition) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3038IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Init modelElement = (ciat.Init) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3039IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.End modelElement = (ciat.End) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3040IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.TemporalCondition modelElement = (ciat.TemporalCondition) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3041IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Notification modelElement = (ciat.Notification) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3042IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Condition modelElement = (ciat.Condition) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSharedObject_3043IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SharedObject modelElement = (ciat.SharedObject) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_ShAssociationLink_4004(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ShGeneralizationLink_4005(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ShAggregationLink_4006(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEditionArea_3044IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeArea_3045IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualArea_3046IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAttribute_3047IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOperation_3048IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEdition_3049IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.ExclusiveEdition modelElement = (ciat.ExclusiveEdition) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeVisualization_3050IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeVisualization modelElement = (ciat.CollaborativeVisualization) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualVisualization_3051IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualVisualization modelElement = (ciat.IndividualVisualization) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUserTask_3052IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.UserTask modelElement = (ciat.UserTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTAbstractTask_3053IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CTTAbstractTask modelElement = (ciat.CTTAbstractTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInteractiveTask_3054IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.InteractiveTask modelElement = (ciat.InteractiveTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTCollaborativeTask_3055IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CTTCollaborativeTask modelElement = (ciat.CTTCollaborativeTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getApplicationTask_3056IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.ApplicationTask modelElement = (ciat.ApplicationTask) view.getElement();
	java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences = org.eclipse.emf.ecore.util.EcoreUtil.CrossReferencer.find(view.eResource().getResourceSet().getResources());
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getIncomingTypeModelFacetLinks_Aggregation_4007(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Enabling_4008(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_Disabling_4009(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_OrderIndependence_4013(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_SuspendResume_4014(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_DeterministicChoice_4016(modelElement, crossReferences));	
	result.addAll(getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement, crossReferences));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInheritance_4001IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActing_4002IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAssociation_4003IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAssociationLink_4004IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShGeneralizationLink_4005IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAggregationLink_4006IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAggregation_4007IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnabling_4008IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisabling_4009IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnablingWithInformationPassing_4010IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisablingWithInformationPassing_4011IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndependentConcurrency_4012IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOrderIndependence_4013IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSuspendResume_4014IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getConcurrencyWithInformationPassing_4015IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDeterministicChoice_4016IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUndeterministicChoice_4017IncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
		
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSociogram_2001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getProcessDiagram_2002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDomainDiagram_2003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTDiagram_2004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3006OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3007OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3008OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3009OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3010OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3011OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTool_3012OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3013OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3014OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3015OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3016OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3017OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3018OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3019OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3020OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3021OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getRol_3022OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Rol modelElement = (ciat.Rol) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActor_3023OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Actor modelElement = (ciat.Actor) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSoftwareAgent_3024OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SoftwareAgent modelElement = (ciat.SoftwareAgent) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTeam_3025OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Team modelElement = (ciat.Team) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getGroup_3026OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Group modelElement = (ciat.Group) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Inheritance_4001(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Acting_4002(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Association_4003(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getObject_3027OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3028OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualTask_3029OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualTask modelElement = (ciat.IndividualTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCooperativeTask_3030OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CooperativeTask modelElement = (ciat.CooperativeTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeTask_3031OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeTask modelElement = (ciat.CollaborativeTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAbstractTask_3032OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.AbstractTask modelElement = (ciat.AbstractTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3033OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Init modelElement = (ciat.Init) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3034OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.End modelElement = (ciat.End) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3035OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.TemporalCondition modelElement = (ciat.TemporalCondition) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3036OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Notification modelElement = (ciat.Notification) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3037OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Condition modelElement = (ciat.Condition) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInit_3038OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Init modelElement = (ciat.Init) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnd_3039OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.End modelElement = (ciat.End) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getTemporalCondition_3040OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.TemporalCondition modelElement = (ciat.TemporalCondition) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getNotification_3041OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Notification modelElement = (ciat.Notification) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCondition_3042OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.Condition modelElement = (ciat.Condition) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSharedObject_3043OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.SharedObject modelElement = (ciat.SharedObject) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_ShAssociationLink_4004(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ShGeneralizationLink_4005(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ShAggregationLink_4006(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEditionArea_3044OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeArea_3045OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualArea_3046OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAttribute_3047OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOperation_3048OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getExclusiveEdition_3049OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.ExclusiveEdition modelElement = (ciat.ExclusiveEdition) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCollaborativeVisualization_3050OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CollaborativeVisualization modelElement = (ciat.CollaborativeVisualization) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndividualVisualization_3051OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.IndividualVisualization modelElement = (ciat.IndividualVisualization) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUserTask_3052OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.UserTask modelElement = (ciat.UserTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTAbstractTask_3053OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CTTAbstractTask modelElement = (ciat.CTTAbstractTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInteractiveTask_3054OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.InteractiveTask modelElement = (ciat.InteractiveTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getCTTCollaborativeTask_3055OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.CTTCollaborativeTask modelElement = (ciat.CTTCollaborativeTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getApplicationTask_3056OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	ciat.ApplicationTask modelElement = (ciat.ApplicationTask) view.getElement();
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
		result.addAll(getOutgoingTypeModelFacetLinks_Aggregation_4007(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Enabling_4008(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_Disabling_4009(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_OrderIndependence_4013(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_SuspendResume_4014(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(modelElement));	
	result.addAll(getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(modelElement));	
	return result;
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getInheritance_4001OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getActing_4002OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAssociation_4003OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAssociationLink_4004OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShGeneralizationLink_4005OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getShAggregationLink_4006OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getAggregation_4007OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnabling_4008OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisabling_4009OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getEnablingWithInformationPassing_4010OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDisablingWithInformationPassing_4011OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIndependentConcurrency_4012OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOrderIndependence_4013OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getSuspendResume_4014OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getConcurrencyWithInformationPassing_4015OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getDeterministicChoice_4016OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
/**
 * @generated
 */
public static java.util.List<ciat.diagram.part.CiatLinkDescriptor> getUndeterministicChoice_4017OutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
	return java.util.Collections.emptyList();
}
	
	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Inheritance_4001(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Inheritance) {
		continue;
	}
	ciat.Inheritance link = (ciat.Inheritance) linkObject;
		if (ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Inheritance_4001, ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Acting_4002(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Acting) {
		continue;
	}
	ciat.Acting link = (ciat.Acting) linkObject;
		if (ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Acting_4002, ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Association_4003(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Association) {
		continue;
	}
	ciat.Association link = (ciat.Association) linkObject;
		if (ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Association_4003, ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_ShAssociationLink_4004(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShAssociationLink) {
		continue;
	}
	ciat.ShAssociationLink link = (ciat.ShAssociationLink) linkObject;
		if (ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShAssociationLink_4004, ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_ShGeneralizationLink_4005(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShGeneralizationLink) {
		continue;
	}
	ciat.ShGeneralizationLink link = (ciat.ShGeneralizationLink) linkObject;
		if (ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShGeneralizationLink_4005, ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_ShAggregationLink_4006(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShAggregationLink) {
		continue;
	}
	ciat.ShAggregationLink link = (ciat.ShAggregationLink) linkObject;
		if (ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShAggregationLink_4006, ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Aggregation_4007(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Aggregation) {
		continue;
	}
	ciat.Aggregation link = (ciat.Aggregation) linkObject;
		if (ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Aggregation_4007, ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Enabling_4008(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Enabling) {
		continue;
	}
	ciat.Enabling link = (ciat.Enabling) linkObject;
		if (ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Enabling_4008, ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_Disabling_4009(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Disabling) {
		continue;
	}
	ciat.Disabling link = (ciat.Disabling) linkObject;
		if (ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Disabling_4009, ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_EnablingWithInformationPassing_4010(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.EnablingWithInformationPassing) {
		continue;
	}
	ciat.EnablingWithInformationPassing link = (ciat.EnablingWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.EnablingWithInformationPassing_4010, ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_DisablingWithInformationPassing_4011(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.DisablingWithInformationPassing) {
		continue;
	}
	ciat.DisablingWithInformationPassing link = (ciat.DisablingWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.DisablingWithInformationPassing_4011, ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_IndependentConcurrency_4012(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.IndependentConcurrency) {
		continue;
	}
	ciat.IndependentConcurrency link = (ciat.IndependentConcurrency) linkObject;
		if (ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.IndependentConcurrency_4012, ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_OrderIndependence_4013(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.OrderIndependence) {
		continue;
	}
	ciat.OrderIndependence link = (ciat.OrderIndependence) linkObject;
		if (ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.OrderIndependence_4013, ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_SuspendResume_4014(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.SuspendResume) {
		continue;
	}
	ciat.SuspendResume link = (ciat.SuspendResume) linkObject;
		if (ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.SuspendResume_4014, ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ConcurrencyWithInformationPassing) {
		continue;
	}
	ciat.ConcurrencyWithInformationPassing link = (ciat.ConcurrencyWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ConcurrencyWithInformationPassing_4015, ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_DeterministicChoice_4016(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.DeterministicChoice) {
		continue;
	}
	ciat.DeterministicChoice link = (ciat.DeterministicChoice) linkObject;
		if (ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.DeterministicChoice_4016, ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}

	/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getContainedTypeModelFacetLinks_UndeterministicChoice_4017(ciat.CIATDiagram container) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.UndeterministicChoice) {
		continue;
	}
	ciat.UndeterministicChoice link = (ciat.UndeterministicChoice) linkObject;
		if (ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
							result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.UndeterministicChoice_4017, ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}
	
/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Inheritance_4001(ciat.SociogramNode target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSociogramLink_Target() || false == setting.getEObject() instanceof ciat.Inheritance) {
	continue;
}
ciat.Inheritance link = (ciat.Inheritance) setting.getEObject();
	if (ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SociogramNode src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Inheritance_4001, ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Acting_4002(ciat.SociogramNode target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSociogramLink_Target() || false == setting.getEObject() instanceof ciat.Acting) {
	continue;
}
ciat.Acting link = (ciat.Acting) setting.getEObject();
	if (ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SociogramNode src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Acting_4002, ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Association_4003(ciat.SociogramNode target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSociogramLink_Target() || false == setting.getEObject() instanceof ciat.Association) {
	continue;
}
ciat.Association link = (ciat.Association) setting.getEObject();
	if (ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SociogramNode src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Association_4003, ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_ShAssociationLink_4004(ciat.SharedObject target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSharedLink_Target() || false == setting.getEObject() instanceof ciat.ShAssociationLink) {
	continue;
}
ciat.ShAssociationLink link = (ciat.ShAssociationLink) setting.getEObject();
	if (ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SharedObject src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.ShAssociationLink_4004, ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_ShGeneralizationLink_4005(ciat.SharedObject target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSharedLink_Target() || false == setting.getEObject() instanceof ciat.ShGeneralizationLink) {
	continue;
}
ciat.ShGeneralizationLink link = (ciat.ShGeneralizationLink) setting.getEObject();
	if (ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SharedObject src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.ShGeneralizationLink_4005, ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_ShAggregationLink_4006(ciat.SharedObject target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getSharedLink_Target() || false == setting.getEObject() instanceof ciat.ShAggregationLink) {
	continue;
}
ciat.ShAggregationLink link = (ciat.ShAggregationLink) setting.getEObject();
	if (ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.SharedObject src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.ShAggregationLink_4006, ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Aggregation_4007(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.Aggregation) {
	continue;
}
ciat.Aggregation link = (ciat.Aggregation) setting.getEObject();
	if (ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Aggregation_4007, ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Enabling_4008(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.Enabling) {
	continue;
}
ciat.Enabling link = (ciat.Enabling) setting.getEObject();
	if (ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Enabling_4008, ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_Disabling_4009(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.Disabling) {
	continue;
}
ciat.Disabling link = (ciat.Disabling) setting.getEObject();
	if (ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.Disabling_4009, ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_EnablingWithInformationPassing_4010(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.EnablingWithInformationPassing) {
	continue;
}
ciat.EnablingWithInformationPassing link = (ciat.EnablingWithInformationPassing) setting.getEObject();
	if (ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.EnablingWithInformationPassing_4010, ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_DisablingWithInformationPassing_4011(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.DisablingWithInformationPassing) {
	continue;
}
ciat.DisablingWithInformationPassing link = (ciat.DisablingWithInformationPassing) setting.getEObject();
	if (ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.DisablingWithInformationPassing_4011, ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_IndependentConcurrency_4012(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.IndependentConcurrency) {
	continue;
}
ciat.IndependentConcurrency link = (ciat.IndependentConcurrency) setting.getEObject();
	if (ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.IndependentConcurrency_4012, ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_OrderIndependence_4013(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.OrderIndependence) {
	continue;
}
ciat.OrderIndependence link = (ciat.OrderIndependence) setting.getEObject();
	if (ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.OrderIndependence_4013, ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_SuspendResume_4014(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.SuspendResume) {
	continue;
}
ciat.SuspendResume link = (ciat.SuspendResume) setting.getEObject();
	if (ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.SuspendResume_4014, ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.ConcurrencyWithInformationPassing) {
	continue;
}
ciat.ConcurrencyWithInformationPassing link = (ciat.ConcurrencyWithInformationPassing) setting.getEObject();
	if (ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.ConcurrencyWithInformationPassing_4015, ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_DeterministicChoice_4016(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.DeterministicChoice) {
	continue;
}
ciat.DeterministicChoice link = (ciat.DeterministicChoice) setting.getEObject();
	if (ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.DeterministicChoice_4016, ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}

/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getIncomingTypeModelFacetLinks_UndeterministicChoice_4017(ciat.DependencyElement target, java.util.Map<org.eclipse.emf.ecore.EObject, java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting>> crossReferences) {
	java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	java.util.Collection<org.eclipse.emf.ecore.EStructuralFeature.Setting> settings = crossReferences.get(target);
	for (org.eclipse.emf.ecore.EStructuralFeature.Setting setting : settings) {
		if (setting.getEStructuralFeature() != ciat.CiatPackage.eINSTANCE.getDependency_Target() || false == setting.getEObject() instanceof ciat.UndeterministicChoice) {
	continue;
}
ciat.UndeterministicChoice link = (ciat.UndeterministicChoice) setting.getEObject();
	if (ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
				ciat.DependencyElement src = link.getSource();
			result.add(new ciat.diagram.part.CiatLinkDescriptor(src, target, link, ciat.diagram.providers.CiatElementTypes.UndeterministicChoice_4017, ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Inheritance_4001(ciat.SociogramNode source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Inheritance) {
		continue;
	}
	ciat.Inheritance link = (ciat.Inheritance) linkObject;
		if (ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Inheritance_4001, ciat.diagram.edit.parts.InheritanceEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Acting_4002(ciat.SociogramNode source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Acting) {
		continue;
	}
	ciat.Acting link = (ciat.Acting) linkObject;
		if (ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Acting_4002, ciat.diagram.edit.parts.ActingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Association_4003(ciat.SociogramNode source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Association) {
		continue;
	}
	ciat.Association link = (ciat.Association) linkObject;
		if (ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SociogramNode dst = link.getTarget();
							ciat.SociogramNode src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Association_4003, ciat.diagram.edit.parts.AssociationEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_ShAssociationLink_4004(ciat.SharedObject source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShAssociationLink) {
		continue;
	}
	ciat.ShAssociationLink link = (ciat.ShAssociationLink) linkObject;
		if (ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShAssociationLink_4004, ciat.diagram.edit.parts.ShAssociationLinkEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_ShGeneralizationLink_4005(ciat.SharedObject source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShGeneralizationLink) {
		continue;
	}
	ciat.ShGeneralizationLink link = (ciat.ShGeneralizationLink) linkObject;
		if (ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShGeneralizationLink_4005, ciat.diagram.edit.parts.ShGeneralizationLinkEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_ShAggregationLink_4006(ciat.SharedObject source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ShAggregationLink) {
		continue;
	}
	ciat.ShAggregationLink link = (ciat.ShAggregationLink) linkObject;
		if (ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.SharedObject dst = link.getTarget();
							ciat.SharedObject src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ShAggregationLink_4006, ciat.diagram.edit.parts.ShAggregationLinkEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Aggregation_4007(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Aggregation) {
		continue;
	}
	ciat.Aggregation link = (ciat.Aggregation) linkObject;
		if (ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Aggregation_4007, ciat.diagram.edit.parts.AggregationEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Enabling_4008(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Enabling) {
		continue;
	}
	ciat.Enabling link = (ciat.Enabling) linkObject;
		if (ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Enabling_4008, ciat.diagram.edit.parts.EnablingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_Disabling_4009(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.Disabling) {
		continue;
	}
	ciat.Disabling link = (ciat.Disabling) linkObject;
		if (ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.Disabling_4009, ciat.diagram.edit.parts.DisablingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_EnablingWithInformationPassing_4010(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.EnablingWithInformationPassing) {
		continue;
	}
	ciat.EnablingWithInformationPassing link = (ciat.EnablingWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.EnablingWithInformationPassing_4010, ciat.diagram.edit.parts.EnablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_DisablingWithInformationPassing_4011(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.DisablingWithInformationPassing) {
		continue;
	}
	ciat.DisablingWithInformationPassing link = (ciat.DisablingWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.DisablingWithInformationPassing_4011, ciat.diagram.edit.parts.DisablingWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_IndependentConcurrency_4012(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.IndependentConcurrency) {
		continue;
	}
	ciat.IndependentConcurrency link = (ciat.IndependentConcurrency) linkObject;
		if (ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.IndependentConcurrency_4012, ciat.diagram.edit.parts.IndependentConcurrencyEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_OrderIndependence_4013(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.OrderIndependence) {
		continue;
	}
	ciat.OrderIndependence link = (ciat.OrderIndependence) linkObject;
		if (ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.OrderIndependence_4013, ciat.diagram.edit.parts.OrderIndependenceEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_SuspendResume_4014(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.SuspendResume) {
		continue;
	}
	ciat.SuspendResume link = (ciat.SuspendResume) linkObject;
		if (ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.SuspendResume_4014, ciat.diagram.edit.parts.SuspendResumeEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_ConcurrencyWithInformationPassing_4015(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.ConcurrencyWithInformationPassing) {
		continue;
	}
	ciat.ConcurrencyWithInformationPassing link = (ciat.ConcurrencyWithInformationPassing) linkObject;
		if (ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.ConcurrencyWithInformationPassing_4015, ciat.diagram.edit.parts.ConcurrencyWithInformationPassingEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_DeterministicChoice_4016(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.DeterministicChoice) {
		continue;
	}
	ciat.DeterministicChoice link = (ciat.DeterministicChoice) linkObject;
		if (ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.DeterministicChoice_4016, ciat.diagram.edit.parts.DeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}		
				
		/**
 * @generated
 */
private static java.util.Collection<ciat.diagram.part.CiatLinkDescriptor> getOutgoingTypeModelFacetLinks_UndeterministicChoice_4017(ciat.DependencyElement source) {
	ciat.CIATDiagram container = null;
	// Find container element for the link.
	// Climb up by containment hierarchy starting from the source
	// and return the first element that is instance of the container class.
	for (org.eclipse.emf.ecore.EObject element = source; element != null && container == null; element = element.eContainer()) {
		if (element instanceof ciat.CIATDiagram) {
			container = (ciat.CIATDiagram) element;
		}
	}
	if (container == null) {
		return java.util.Collections.emptyList();
	}
		java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor> result = new java.util.LinkedList<ciat.diagram.part.CiatLinkDescriptor>();
	for (java.util.Iterator<?> links = container.getItsLinks().iterator(); links.hasNext();) {
	org.eclipse.emf.ecore.EObject linkObject = (org.eclipse.emf.ecore.EObject ) links.next();
	if (false == linkObject instanceof ciat.UndeterministicChoice) {
		continue;
	}
	ciat.UndeterministicChoice link = (ciat.UndeterministicChoice) linkObject;
		if (ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID != ciat.diagram.part.CiatVisualIDRegistry.getLinkWithClassVisualID(link)) {
	continue;
}
			ciat.DependencyElement dst = link.getTarget();
							ciat.DependencyElement src = link.getSource();
								if (src != source) {
	continue;
}
						result.add(new ciat.diagram.part.CiatLinkDescriptor(src, dst, link, ciat.diagram.providers.CiatElementTypes.UndeterministicChoice_4017, ciat.diagram.edit.parts.UndeterministicChoiceEditPart.VISUAL_ID));
		}
	return result;	
}		
		
					/**
 * @generated
 */
	public static final org.eclipse.gmf.tooling.runtime.update.DiagramUpdater TYPED_INSTANCE = new org.eclipse.gmf.tooling.runtime.update.DiagramUpdater() {
				/**
 * @generated
 */
		@Override

		public java.util.List<ciat.diagram.part.CiatNodeDescriptor> getSemanticChildren(org.eclipse.gmf.runtime.notation.View view) {
			return CiatDiagramUpdater.getSemanticChildren(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<ciat.diagram.part.CiatLinkDescriptor> getContainedLinks(org.eclipse.gmf.runtime.notation.View view) {
			return CiatDiagramUpdater.getContainedLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<ciat.diagram.part.CiatLinkDescriptor> getIncomingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return CiatDiagramUpdater.getIncomingLinks(view);
		}

		/**
 * @generated
 */
		@Override

		public java.util.List<ciat.diagram.part.CiatLinkDescriptor> getOutgoingLinks(org.eclipse.gmf.runtime.notation.View view) {
			return CiatDiagramUpdater.getOutgoingLinks(view);
		}
	}; 
			
	}
