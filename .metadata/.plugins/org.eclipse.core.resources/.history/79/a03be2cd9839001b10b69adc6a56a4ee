/*
 * 
 */
package ciat.diagram.expressions;

/**
 * @generated
 */
public class CiatOCLFactory {

		/**
 * @generated
 */
	private final ciat.diagram.expressions.CiatAbstractExpression[] expressions; 
	
	/**
 * @generated
 */
	private final String [] expressionBodies;	

	/**
 * @generated
 */
	protected CiatOCLFactory() {
		this.expressions = new ciat.diagram.expressions.CiatAbstractExpression[34];
		this.expressionBodies = new String[] {
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
				"self <> oppositeEnd",  //$NON-NLS-1$
							};
	}
	
	/**
 * @generated
 */
	private static CiatOCLFactory getInstance() {
		CiatOCLFactory instance = ciat.diagram.part.CiatDiagramEditorPlugin.getInstance().getCiatOCLFactory();
		if (instance == null) {			
			ciat.diagram.part.CiatDiagramEditorPlugin.getInstance().setCiatOCLFactory(instance = new CiatOCLFactory());
		}
		return instance;
	}
	
	/**
 * @generated
 */
	public static String getExpressionBody(int index) {
		return getInstance().expressionBodies[index];
	}
	
	/**
 * @generated
 */
		public static ciat.diagram.expressions.CiatAbstractExpression getExpression(int index, org.eclipse.emf.ecore.EClassifier context, java.util.Map<String, org.eclipse.emf.ecore.EClassifier> environment) {
		CiatOCLFactory cached = getInstance();
		if (index < 0 || index >= cached.expressions.length) {
			throw new IllegalArgumentException();
		}
		if (cached.expressions[index] == null) {			
			cached.expressions[index] = getExpression(cached.expressionBodies[index], context, environment == null ? java.util.Collections.<String, org.eclipse.emf.ecore.EClassifier>emptyMap() : environment);
		}
		return cached.expressions[index];
	}


	/**
 * This is factory method, callers are responsible to keep reference to the return value if they want to reuse parsed expression
 * @generated
 */
	public static ciat.diagram.expressions.CiatAbstractExpression getExpression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map<String, org.eclipse.emf.ecore.EClassifier> environment) {
		return new Expression(body, context, environment);
	}

	/**
 * This method will become private in the next release
 * @generated
 */
	public static ciat.diagram.expressions.CiatAbstractExpression getExpression(String body, org.eclipse.emf.ecore.EClassifier context) {
		return getExpression(body, context, java.util.Collections.<String, org.eclipse.emf.ecore.EClassifier>emptyMap());
	}

	/**
 * @generated
 */
	private static class Expression extends ciat.diagram.expressions.CiatAbstractExpression {

		/**
 * @generated
 */
		private final org.eclipse.ocl.ecore.OCL oclInstance;

		/**
 * @generated
 */
		private org.eclipse.ocl.ecore.OCLExpression oclExpression;

		/**
 * @generated
 */
		public Expression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map<String, org.eclipse.emf.ecore.EClassifier> environment) {
			super(body, context);
			oclInstance = org.eclipse.ocl.ecore.OCL.newInstance();
			initCustomEnv(oclInstance.getEnvironment(), environment);
						org.eclipse.ocl.ecore.OCL.Helper oclHelper = oclInstance.createOCLHelper();
			oclHelper.setContext(context());
			try {
				oclExpression = oclHelper.createQuery(body());
				setStatus(org.eclipse.core.runtime.IStatus.OK, null, null);
			} catch (org.eclipse.ocl.ParserException e) {
				setStatus(org.eclipse.core.runtime.IStatus.ERROR, e.getMessage(), e);
			}
		}

		/**
 * @generated
 */
		@SuppressWarnings("rawtypes")
		protected Object doEvaluate(Object context, java.util.Map env) {
			if (oclExpression == null) {
				return null;
			}
			// on the first call, both evalEnvironment and extentMap are clear, for later we have finally, below.
			org.eclipse.ocl.EvaluationEnvironment<?,?,?,?,?>  evalEnv = oclInstance.getEvaluationEnvironment();
			// initialize environment
			for (Object nextKey : env.keySet()) {
				evalEnv.replace((String) nextKey, env.get(nextKey));
			}
			try {
				Object result = oclInstance.evaluate(context, oclExpression);
				return oclInstance.isInvalid(result) ? null : result;
			} finally {
				evalEnv.clear();
				oclInstance.setExtentMap(null); // clear allInstances cache, and get the oclInstance ready for the next call
			}
		}

		/**
 * @generated
 */
		private static void initCustomEnv(org.eclipse.ocl.Environment<?,org.eclipse.emf.ecore.EClassifier,?,?,?,org.eclipse.emf.ecore.EParameter,?,?,?,?,?,?> ecoreEnv, java.util.Map<String, org.eclipse.emf.ecore.EClassifier> environment) {
			// Use EObject as implicit root class for any object, to allow eContainer() and other EObject operations from OCL expressions
org.eclipse.ocl.options.ParsingOptions.setOption(ecoreEnv, org.eclipse.ocl.options.ParsingOptions.implicitRootClass(ecoreEnv), org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEObject());
			for (String varName : environment.keySet()) {
				org.eclipse.emf.ecore.EClassifier varType = environment.get(varName);
				ecoreEnv.addElement(varName, createVar(ecoreEnv, varName, varType), false);
			}
		}

		/**
 * @generated
 */
		private static org.eclipse.ocl.ecore.Variable createVar(org.eclipse.ocl.Environment<?,org.eclipse.emf.ecore.EClassifier,?,?,?,?,?,?,?,?,?,?> ecoreEnv, String name, org.eclipse.emf.ecore.EClassifier type) {
			org.eclipse.ocl.ecore.Variable var = org.eclipse.ocl.ecore.EcoreFactory.eINSTANCE.createVariable();
			var.setName(name);
			var.setType(ecoreEnv.getUMLReflection().getOCLType(type));
			return var;
		}
	}
	}
